package main

import (
	"fmt"
	"strings"
)

// func arrayManipulation(n int32, queries [][]int32) int64 {
// 	arr := make([]int64, n+1)

// 	for _, query := range queries {
// 		a, b, k := query[0], query[1], query[2]
// 		arr[a-1] += int64(k)
// 		arr[b] -= int64(k)
// 	}

// 	maxValue := int64(0)
// 	currentSum := int64(0)

// 	for _, value := range arr {
// 		currentSum += value
// 		if currentSum > maxValue {
// 			maxValue = currentSum
// 		}
// 	}

// 	return maxValue
// }

// func checkMagazine(magazine []string, note []string) {
// 	// Write your code here
// 	result := "No"
// 	totalNote := len(note)
// 	for _, v := range note {
// 		for i, z := range magazine {
// 			if v == z {
// 				magazine = append(magazine[:i], magazine[i+1:]...)
// 				totalNote--
// 				break
// 			}
// 		}
// 	}

// 	if totalNote == 0 {
// 		result = "Yes"
// 	}

// 	fmt.Print(result)
// }

// func twoStrings(s1 string, s2 string) string {
// 	// Write your code here
// 	result := "NO"
// 	total := 0
// 	for _, val := range s1 {
// 		if total > 0 {
// 			result = "YES"
// 			break
// 		}

// 		for _, val2 := range s2 {
// 			if val == val2 {
// 				s2 = strings.Replace(s2, string(val2), "", 1)
// 				total++
// 				break
// 			}
// 		}
// 	}

// 	return result
// }

// func countAnagramPairs(s string) int {
// 	anagramCount := 0
// 	substringMap := make(map[string]int)

// 	// Mengeksplorasi semua substring
// 	for i := 0; i < len(s); i++ {
// 		for j := i + 1; j <= len(s); j++ {
// 			// Mengonversi substring menjadi slice rune dan diurutkan
// 			runes := []rune(s[i:j])
// 			sort.Slice(runes, func(a, b int) bool {
// 				return runes[a] < runes[b]
// 			})

// 			// Menghitung jumlah kemunculan substring yang diurutkan
// 			sortedSubstring := string(runes)
// 			substringMap[sortedSubstring]++
// 		}
// 	}

// 	// Menghitung jumlah pasangan anagram dari jumlah kemunculan substring
// 	for _, count := range substringMap {
// 		// Jika ada n kemunculan, maka bisa dibentuk n * (n-1) / 2 pasangan anagram
// 		anagramCount += count * (count - 1) / 2
// 	}

// 	return anagramCount
// }

// func countTriplets(arr []int64, r int64) int64 {
// 	// Map untuk melacak frekuensi kemunculan elemen
// 	frequencyMap := make(map[int64]int64)

// 	var tripletCount int64

// 	// Iterasi array
// 	for _, element := range arr {
// 		// Cek jika element/(r*r) dan element/r telah muncul sebelumnya, tambahkan tripletCount
// 		tripletCount += frequencyMap[element/r] * frequencyMap[element/(r*r)]

// 		// Tingkatkan frekuensi kemunculan elemen saat ini
// 		frequencyMap[element]++
// 	}

// 	return tripletCount
// }

// func freqQuery(queries [][]int32) []int32 {
// 	output := []int32{}
// 	hasmapQ := make(map[int32]int32)
// 	for i := int32(0); i < int32(len(queries)); i++ {
// 		operation := queries[i]
// 		if operation[0] == 1 {
// 			hasmapQ[operation[1]]++
// 		} else if operation[0] == 2 {
// 			if hasmapQ[operation[1]] != 0 {
// 				hasmapQ[operation[1]]--
// 			}
// 		} else {
// 			o := int32(0)
// 			for _, hasMap := range hasmapQ {
// 				if hasMap >= operation[1] {
// 					o = int32(1)
// 					break
// 				}
// 			}
// 			output = append(output, o)
// 		}
// 	}

// 	return output
// }

// func medSort(arr []int32) int32 {
// 	num := true
// 	for num {
// 		num = false
// 		for x := int32(0); x < int32(len(arr)-1); x++ {
// 			if arr[x] > arr[x+1] {
// 				arr[x], arr[x+1] = arr[x+1], arr[x]
// 				num = true
// 				break
// 			}
// 		}
// 	}

// 	return arr[int32(len(arr)/2)]
// }

/*
********************
Given two integers N and K, the task is to find the total number of ways of representing N as the sum of positive integers in the range [1, K], where each integer can be chosen multiple times.
Input: N = 8, K = 2
Output: 5
Explanation: All possible ways of representing N as sum of positive integers less than or equal to K are:

{1, 1, 1, 1, 1, 1, 1, 1}, the sum is 8.
{2, 1, 1, 1, 1, 1, 1}, the sum is 8.
{2, 2, 1, 1, 1, 1}, the sum is 8.
2, 2, 2, 1, 1}, the sum is 8.
{2, 2, 2, 2}}, the sum is 8.
Therefore, the total number of ways is 5.
********************
*/
func countWays(N, K int) int {
	dp := make([]int, N+1)
	dp[0] = 1

	for i := 1; i <= K; i++ {
		for j := i; j <= N; j++ {
			dp[j] += dp[j-i]
		}
	}

	return dp[N]
}

// /*
// ********************
// There are a number of animal species in the forest. Each species has one or more predator that may be direct or indirect. Species X is said to be a predator of species Y if at least or of the following is true:

// Species X is a direct predator of species Y
// If species X is a direct predator of species Z, and Z is a direct predator of Y, then spec is an indirect predator of species Y.
// Indirect predation is transitive through any numb of levels. Each species has a maximum of 1 direct predator. No two species will ever be mutual predators, and no species is a predator of itself. Your task is to determine the minimum number of groups that must be formed to so that no species is grouped with its predators, direct or indirect. As an example, consider an array where each position represents a species and each element represents a predator of that species or-1 if there are none. The array is a [-1, 8, 6, 0, 7, 3, 8, 9, -1, 6, 1] and weâ€™ll use zero indexing.
// ********************
// */
// func predator(ints []int) int {
// 	max := 1
// 	arrLen := len(ints)

// 	for i := 0; i < len(ints); i++ {
// 		a := i
// 		counter := 1

// 		for ints[a] > -1 && ints[a] < arrLen && counter < arrLen {
// 			a = ints[a]
// 			counter++
// 		}

// 		if counter > max {
// 			max = counter
// 		}
// 	}

//		return max
//	}
func generatePattern(N int) string {
	if N < 1 {
		return ""
	}

	var pattern strings.Builder

	for i := N; i > 0; i-- {
		pattern.WriteString(strings.Repeat(" ", N-i))
		pattern.WriteString("x")

		if i < N {
			pattern.WriteString("o" + strings.Repeat(" x", N-i-1))
		}

		pattern.WriteString("\n")
	}

	for i := 2; i <= N; i++ {
		pattern.WriteString(strings.Repeat(" ", N-i))
		pattern.WriteString("x")
		pattern.WriteString(strings.Repeat(" o", i-1))
		pattern.WriteString(" x\n")
	}

	return pattern.String()
}
func mains() {
	fmt.Println(generatePattern(2))
	// fmt.Println(predator([]int{-1, 8, 6, 0, 7, 3, 8, 9, -1, 6, 1}))
	// 11111
	// 1112
	// 122
	// 113
	// 23
	// fmt.Println(medSort([]int32{3, 1, 5, 2, 4})) // "sredoC dna dlroW olleH"
	// fmt.Println(freqQuery([][]int32{
	// 	{3, 5},
	// 	{2, 1},
	// })) // "sredoC dna dlroW olleH"
	// fmt.Println(countAnagramPairs("ifailuhkqqhucpoltgtyovarjsnrbfpvmupwjjjfiwwhrlkpekxxnebfrwibylcvkfealgonjkzwlyfhhkefuvgndgdnbelgruel")) // "sredoC dna dlroW olleH"
	// fmt.Println(twoStrings("hitcwvrtvizzztsecgtezzitwhgcbvesrtgwijrvbihsctwvigrbtbbisgewzevjgsessiebrstirztjtwgzzgevweigiccjzswecbtwgitzsicbjezjttcjiittgsggtehtwwgjbtghrirejechbhiwcbrvcgzevjvszztwssirsitsihcegrtctzghrbgibibgjrjgebcvbtgetjbrthjzvesiieciwivrzwhbvbhhihchgsjgjsezhgihtghrcrewbgibicrzzrtijcctsvehhgzticrbhvjzjgeitsbberizjivbzegjjbwrsbzrrsvhgbgewgeiwvvzihbgwgeseiiriewgvitjbtbrgicjgvgjegzewsbvrwtibsbivzjivjebcthzwsersbeeeeccthwztgwcwwgjbwtbvctwievsbzjstviiwtctvbgiicgetijrczchbwecitzcrehejrstjjgzbgvwvrwhiwzggcbvgjegtewrjwbwscgcwgjbeswssbhcsrgicigsjjrhsrtegjbrjczbchzjteewchbjiwvhtwwgsretsteiieiisvizzjrgriigwvezvbtzvrzjzjtsttgrvsjrithiizhzvzszjjrwjrwhgcrgcwzhetvriregsectewzvevcrrzrrrbvgiirwhitbzetcbbcjezsbezzbbtjzcszsbstzcbjjstsvjewwrihjzbcgswbhtvjjsgevciwzcheetvgezgrjhbbbwesrwrzwigweehcvsertjhezwbvrswjeghczbgjrzvwwwceijvijvviggwthvzsvrijhwzjihrbecswwwgtrchevsivwrbwwiiwhvgrhbvtghcstsrzzthjgrewghiecwcbgwzhvjezsrseccerssgticvzeecjgiiwrcbcvbchiirvithwrzgrsviihjecrgbvbzeertivssjgeijzgrtrjcbbbhsgeirsgsswigcizgcszzwebvbrstjehrhsebsbbzjtberrbigjbcctesvctvitgjgrsizggsbevrwwbbczgicbgigrcijjzsezzsisjetchwecctbggbczevvvisbgbrcsvtrhihshjhbesjcsrzhsczsjzgbvjbebrjwjjgcztwrtrzbtwgejggzevvijgeeiivgbjrrtbtethgztsbicjwrvsbejtjzcrwsebjrrvbhrhzzcvjhbzrvtvctzbzjhrerwheebshrtezvhvgjbgehbbtsstewwwhccjtigwwvwwcjwbeejgbiegzzvtjzwrhgjgzigwetssvtzzcbggctszvjshsziwwvcirjisshcvitgcgrriwerizszbbvcjzihzjgejzjhbtezshvcgrizizsvvrrzwgejhtehjzzbbjzcbzstzchtezsjbvjzrweezzerjhhwesshvrtzhirrjjebsjrcwcwerrhzechsrgbjjwwjrjchhzvibreghtssijshvgbwivtrvgtbserwvhztgjwttbsjrcchjvviziczhsewhzgveevsethsvvwtvvzbgzwjwrgcjeghtjhgjsgvzvibriggrjtstijhrvteithjjwhbvevjeebewsrwejtbtsrttgrbhchegetjgvtvrhgwbjtwrcverwgrigtjsiercthrhrhvcjggrihzbecehszeejwwviizgjjetbtzvivjvvcrthchvszjzregtrwgzvzjwtiwejcbhwwswzgcwibrjrbwvsccejehvethjjsriswgzegtwrghhgigireeibvesrwerrgigitvhjcgjzzbebezchtzijeejzweiivtzesbsbgwiszvzcvvhhrjjhhjvscbwbjiszvrzzscwzggwwithceigbcssezwccjjhgrcvivtzitrbjcgtibebbthcjcccbzwrwbbjbsjibvszbrirebecsbvggeebzsrrerhbrsctwcbhrgvwcctrhchjicziecsgthrrtzijivwtrciiztrzgtbibiwiiwscrhjwjcvtwhtjwrejiwewvgbczwtschhwtevggghzewjzsbwhweswgiwzbwwsgtivztrziiwzchcsehjghzwrjtgbbwwvsebsrrchhcrzhtwrijhzhswesersvtgwtsrwesitbrrigzbgwvbvwvwrvgsgbzwgejjtsszjvihbebvgjrztjzrcisgjcswzssvhsztghrivtjjswhwhvwhvgiicbsvtgtcvwziicssieibjcbibcicvhchgjhwhsvsjzvhsvbjcerbitrgjbbhewcszvbbgvvgwvvisesgggcvrzjsgvvtgwebihcsivcrbzibichsztgsivgzebjzggcvwbejijhgvijijjebejwbbtveecrwigrhzgvstibethwtsegwbhtbgjbsgehhvsrjrsresrwhishvzbhhrzzjzberwsrjezwvvhcwbhhzwrzhczwwzvtjziirierrivcwghhjtgzgcjtgigcwthbccwciizhcsjtvzhzhhsbjrzgwevcjhireiczsvirzcjwcchcgjeigjbbtjrrjbbbzjvjigezhrwzgbtvithbecrizrihhgzsrssbjgbtztsbwhizzvgevrwsjcsgeiejejhegsvvbrvchsbrcivcvtctizhigiccbesbverrtvzvtezvvehgzccjcieetvheirjcggwijttcvciwrssttssizserztjibzhzhijcjwbieesesjirchgebjgjvvwribtrtwegctisrrhsirsbviiegvcvhrgevezjwegwsjihwtbsvwtvvcwizhzvecjsjrzzrscgrzihrsescrehgihhvcjswvjzhgchztvrebvccgrzbhvjztvcgrcbchbwtcbrtbzbcvsvrbitvcrhzzhsciertjsherhhzzthischebcttrwjgiezcztwzvbehrgtwwrrhtctihbtczvsczsrviczvwsejjrrzwjbhsgggzvsrtterwerhggjeeeiggeibszbtesejjciwjjebvhejvjzijtibrcwwcherrteijbbizthjiibwtzjzjgvwivbwvsbihsgrigsgvgebjzjbjvitsszgsjjggchszvzvvvesvcghtijshztstbbzwrbhswbtzewjigrhjbgibhttbswwwgvjtzwtsgshvgcigsghwgrzsteissbrtwvtbccevveegsbsbecjtjssgtrtiwtwhjviezcewgzszrhjsbvebrizvwzzercbgtehvijthrhizgiwzjrcjetzgzrtbrehvvztihjrhwzejvtjhjictvbtvsjczbhijizhevjgtvhgcbtrrgchvjzetrrrecizwjgitwvcejwshvihjijvvzhgccrrhctiihregrrjiwgswervveszceeicijjctvgswshjbtibttrtzjszzetzihgsggwejszjrhcetibehhebtrgsgcwgsjhzwrrwzsjbgtrtjjcciebzivesjbrwvttbsztstwtbweveejewetgcvejszejievezrevzvivwhiiibjwijzstsgigcevhgbzeizjgivshvzjisbrgjzvjzhjbivzwhtteijeewgzvvctzjwzsivgrtzvscebvezgbzhsbrivehehsvcccbzibcegzegzshbrizwwigwhectezegccjhvhwsrvsbgegvizwebtbzssebzwiwgzrbezwecvjvggrvcthwhwcszsjgigtgiggcrccttvsisvjehvwiszcwgczhhbzztbgvjrgciivzvvcrggtjrgzzhsjewgsjttsreshbhcvcibzhgbggwhgjjjeicgshvwhbtgiwriztiebjcjjctjhcjggzsserewwgijzgsgzwvsrzssciebhrrgjebcbwsvwbtbwhjtwsvjvbhtvbbtzejeiirrvezrzzgjgvghcchjvbtvbsrbvjtbitrtjrhghsgbrvgizcvejvjrtjzgghgrvtvhtwihezvhijhscjtgbhvtgrribvzwwbvbzrbrbehhrtbbtgwshbrgcbbtezvgejvweggiwstzizjtjvecjwirbhvrhjzccsrgvhbsrerhbhwicjtijrzrhjtstccijjjbvtzsjwwiigvrwercrjjeivbivcjzciscecjigjiwgteghwwtvrebrwverhiwwbzbtgvjrvgechjtgtsrzwevhircjhssitjtesgwiiwttggvweewhirzsbgcsjrwsvwvgerweizgezegrsjvctzzrrtrreejjwitbrcwbsgzettsjzethvwzswewvgsijgiccvvergsswsecrrzjzjhghijhvgjevhjvsvbizzjhcvttivzshjjbijhesrwrhtresvgwizrebhjvttrshwjitwtetjjtjgrzvbjebvgrigvgjsgtebwzjvrwbvzbjvtjcivzgjwweehizzhgjzchezcwzecjbscjwwithzgjhtcbjrtwsjbsibcrbvrvhgwbbbzjcjvbsrhiwvbhcwccwegbzwigvzsrstjcbvvcthhwzjjwtzhrvhiwbhrecjwzcrrcejbvwgrrwejwcjhsrehggrgihwvchhwbbrbwrwewgbgzzscgtrbbvrtsejggzvzzjsbrgirwbjhvwiisbsbvhtbzscehricsrhvvjwhieczgbwrwjbhwjshgzbccihrivziwgzgwwrgtvzhggcghwietbjgjvsgibrjcczsciiibcjtizbcbzezczcihttczjzhsrccbtjitcsgezsrjbwvceweizicrrrgvwtgjvirisvcejwrescjticzzzcsbrsveizhevttrzbisrhcvvbccbvsjjtwttebjrrsvervehrzvttegirsjzjvgrsverrbsbitrzsgetwvitvcbivrrceeeeiirwchrbjhevgricbzgvczvgvrhbwjegjrtjhiiiicjgcrezttvzgjggcgwcihssrghegbvhzgbztjircztweezivgzwcscrvbwtivjzejjrzjetswevwevwhjcvrjbrwwvjjhvsbijezwcjzibzgiziwetirieggibztwzgsihbsbvejjhcrctiswzscjgirjisbgczscscbisgjgtzwcvhtgervwcercwccgzstjgezibrttcrettcrzvhjsvctsjcehjbwrsscjgststcvgshstiwcciczgrercccsiivzctzhrrsgsegczvzseigzwctvsvcjrjsbebrjjzzitsvvehgtrvszzrrhjesbhrhijthhcrzihvrvewcjecbtrzsgigtervsszrzcbtvizwjjbzzhsivehirrshwcwvbebthcgwwjwbcszwersezbivzghvbgbjrejgctgcwgcesgiggwcgergreebtwjwbrzcvwhstcjzcjvgbttjwcbzzwsgwzevzsweiijigvvtzcvshbzieziwtbbhtrtgiwwitvgizjcsjtrvhhbhjrthtzigerbtigteegtiziitwrjibcgjcsevsshezjrrrehsgwbtztbhjswswrcieszbzvrterhwzbvrizbhsgsisvwizhgcisejvshjivebgcbvtitjbsbgrcweibivrbcrgztetztsrjrvibzecgvvgicszvrcivgsgtthchggczchcwhgtegbwttrwhgbcehgzzgtivtjvriiwvceewbrbebhzswswhirrzihitwbgswwhctrgwiwejwecwebcbrtvijsirchveizshjhszjcjjrtvesbrceevbwbjbtwvttciwhcgzzibectwrrshiwjjshwwvvjwvhschrijhvhzgwjbhscejizhtrjttggtbtvsbhsevbzijwtvhgvrbjrzvhsvbgwbzjhhiggihsirctsvwsibjbbtgbheccswrbhbbbvvcecwbzbegssretczjhztrbtcehbbcgjwcvtwvzjhvvtcrwhzbbsgwrsbwjsvwizghszieghjzhcstevgvchcihjrrrrhibeehgrvwhthsgtwtvzghczewcwtegrigbhbbhihjtgshchejgthvibjhescrtbvhctjgtihcthbghvizsgggervwetjrsjcztjthzcebvvtgcwwtjcgsvihrswszeccjirsvzsetjjvgithissvzjvtiwbcivhrsbihczehvvbcsjccrzbvsegsciwrevhgjecvbhcvgrtcreecgszbbwheiewccsthhbeiztjethjtscivwrerigwhcehgizgshjvvbeercigscgbbztbwbwwghrszstsesjihcijbcztgvjriigzwgziesjesgbjevgerhetswrjgvrzvbwegvczbwjszhwictiicjbgebhrehtwjwbjczrhwtczrcsicbvzssrcgezshvsrhbiicjtjtsjtwjczirgwgzjiejcgbesthectbwcgbwbhswscbjjhvjjzjicbstitehzthswjzgrgeetvcgviwsghzcwjtijhrhhhbwghsechwjiwrczwzjiwzisvgtjjhbevvvgjhtciggbgvtcgsejhcvjrszjcvvwzczchrrtcgjsegevrvcszgijigtjwhrbttjcjjzegswhestzvwwrtjgbwtrtrjjzvtwwhjsbgivwchithvsrsrreirvjjgzzsrsecrvssticzhhssrsbiijiwhzgsizeceivtgjsvjjsjcgvrbzgjhvbgthszbvvteeirjigvgjhizrhziscijczvzeevwtisgtzrrihwrhhvscrzrgwcrgetztrcceshvsgtswrbbgczgwrsvtwrecghiwrcgrbztszhgwhhejizgwtvsetwicebiswiesghzscsgbrbzjhjvewjrwrjicizjischietvzhzrsswegwehhvjwibzibzchhetihszjhgvirbjjszvwebszbsjwtibjghjbjrtzjhvwtrgsrwsvectjbsjizvviiibbivzziggcrigjhtrewrwesvvigviwirtcgcweebrbehezwrggjsvvitbgrwigbtwrbzebchciewzrczevbijszigrchjeitzsrivsbihshssvjjjgssvtrewgsbiisbhwwwbziezirsswsscrrvehvecetvsggvttwbgsgwissgvctibcgbsgsescstzzbbvzbbigjrrbgeigjgcbehvstivwhhhttvrbtejegggivjrsivtssiihhjecccbghherwczrctwzbsgrecztgvigrvibihcjirzsegjszgbgcbieshcjjizicstjeesvigcbrwbghzrezbbswwwvevbgziwrhbtetcbwcgrvevwwwbhiibcrjtcviwevhcigtjggswrczrrtctewhcbtvirsigtzhbirihhrczwshhhcviriczizccwbzisbcwrjevewwcbtwbzhizstbgsvvtbwjvhwwzrrttggvvvezgsrizecbcwgzivbzthvisecsvhsseibhjijzibsszrgsrvzswzercevtvzzwzriwvetbvbcvrrztgwsiewbzevhsjtzrtgshrvssszrbztvvzceigvgevvvvztrbtjzijhjbchijhibvvvwvvsccjhiiseivegtvsgwiseihzceererbhhzhvthvhezvbcrrwgeibcjwwvwiscrhrhvsgrirbvcwztwjsjshwjrhvwerzjwwgjtvhsbwcszcirisvvhvebvvgbtejtthewsbcbbtcigshribcisjttriebebcteirjtjjhihicijhhhvrishvhibwbzjiwzbctwghtcewiiitbebtbzbwvtecjecrtgsrhztcitheesvriiivjceiziiggzjjzrgisezcttchvssjgvicvzbhggjstwbitichgtjswvwbthzvvbtewresgwctcggszcjezhetwtzsbgijsigbrtrtrwihizsrejjbzjsgjjsrgwjgvisbsbwezcbhwbzivbjvjthvbscjbizgissrrjbvicwshezitihgigecwwjsjvghwrjtbjigicecghrecrzegjhrhjehsjetvthvgszrvrttvezcbbbstbvbehstjvsjrwjziccgcbewtssehtbbwsrjcvbsccsswsterwiwtrcgcicrejvjgzvsechbrhvihvvzrbwiitvwhwjjvbtceegeweczjhwjtteczrwhwjwzesttcgzecjrbirgbwhzvgrbgswvwtwcijzcccewcbecwbergwggwegvihsbhvhgzjwtswtwbrzhcssccvbsezzzgtgstscjwrhssrrjgzhrerccsevszjejtzsvjhiewzvbzthcjcjgzhebtijgetchzsttivgztijzrsceiszrthsibvbsvjtcggbwvcbvvzcwzbtjjeegczsvhitvwcjbgezggwjrgwevvvhivchhjbweezjjerbbscgjiwecjcjgwchzzbwjbhtczbsrejcvvgictczezzvrjighwgbchcchjiiishvbjzwtjthejrewijrizhitbvgeczhjhiistrczgejwibvrewwcchtvbsvttsiihczzwihgheszeicezwwjvhzghewzsbhcrsethzeiijsriihsgcgttvejwhzhscjvgjibsiejzzjvhsshgibtszhihgstbewjvsbehgzewcrbwjevjjhvshcswhvjgivzrstewirjbstcjczbigthgwejchesrvtgvrigvvbchzzgcbrgcebbsghwgwjjjgegevhzgzgzbicscgbezstcgtwcitgwevcitbrvetejribhhhiwzicsvcjibvsrjrrzijrzwchziezgjiwgsgvwstcwjwtsiswrvghhgztjrgvsrhstgrzwbvggwbzzwwggzzsizvrscszhtgghwicwcgbveicrgvgetvbeisjbsirsergwgwgiwhtvwsrhtejetisewhscvgsrwbeeevewjvwccrtzjzjbrrzjwribrvcecevvszjcgzzscijjgzitszrhjhbberteiehjvggcbtzgwebbrghhvzsrsbrwsjtwhvjjwhszgrgiehvvrwwjwhhbjewzrwervhrsriwsivrbbiiezgbgvvscrvsivjitgbtgergrihwberbvgceietgjrzbvtbrbzwztwezsgjsbvceetievcwjgbrcthewvisgwcvrztjhtzizetrijewrjgswersjsiwwtheibbsiegvewhziebrzsizjjvizirsebthcegsjwsbhbtjevjzjvirvzegbvrcsscesjchijcgteithvwcghbvjstwttttvzggjvijjescgigbhrjtbczcijczhighrgcgjbzbvrhgezzbjvzwhbvecebgjjretjbigcwtejcbjrscsjzzgjbizsgrjciwevrjswgtszvreirewzegvvresizcgitevetriwbcetwzcevrzwvhgghvgeihevhrrziithttrhiezjjttherrehwejrgezrgsebzvivreztigzzcbecgvbcwrivwerhtiiwsbtjjwvceivsjtzbirwibjjcjwvwhzgbihzcbzrvjjgztvwjtcjwbwtigshhjeccrswwsjzibcvjzcrggtsjihbbcerwieberzeijceeirswcebievehjgjhvbhbtjgjzgwsvzcjegisgjwwrwizhjwvtewrwgsjzgistzhgcvbzbgbrhzhbswigetejvwwhtieiwwtztcsbcgrtcihrtszercsvrhecvwwercvhevczibtjtwevvjhewigjgzgbhgivvezitrghjcwizzcvwjzssjbecwjsijeciiebiwbbgzhbigtbrwevwhgweizcceesgzrvjtjjwbbwsgcvcwbtvtrrizweewbhtchjjvvvcvzwvcivsrgttcibcrjggzbresihvbchssigbwjstvcsicbtgicbrjbvtwtbezrctbtjgetczcrztjbcsbshbvzivjbvihieesjbscivhtvgevehbcwhszisjsgjhsgccsierhcewwjcewegwibsbwgcsvvetzbjitcbrgvwseeezigzrhescshsvsittebvhhbrebitzwhzegegeewhgwzrwicrghwbhiirvtghtbgcwsithbjhzvtvbtrweegiscvhttrrhbrcgctvwziwsgbhcsgzjrbcejcwgwvjtwjswhszbstwszbghhgvijvcezrgiigczgghjchsthgvvebzjhhjbrbzrvcjzwvcvhbvwwbcwerzgwwjgzzgtzhhgiwwthhgzswzvjezeizcswswhczebgrjvwrhjtvhsvejbcshhssrjcejvrrewvezrvzsgthzerrgczisjwizbigjevriwwjhrhrzvhvgitietziecgtsbwbzebivhbjssgebcergwsjjicjbbejzstcvzhbwittzchisrewsvsstrezchrhwrctcwbtvbcstrsbswrwrtrjrwgizjsjcijsctgjgsbsbggtcgcebtzztwjgvvvshgvhbitwwjrthciszjswzsvhgbwvcezicrhseichtehveswzwvgeisgjzvsirzvbbrwjbbsresrhetbgjebrcghzjtzjtrzvetgjbiirieeghieiczvbcetvbwsevshzvrjjcesbgvchtsvjiwbvsevjjztwgbbjhvgvhhzjzieejtvrhciehwctchtiwwctgitszegtecgrjjczzwbcgbrtevbrhhwzvzgeszwvebbihjrrzhijzbeisbhszetvsiijjzttwshjjcvzsieeeriswisccshgrzreztcbjtebtsvgestsirtzwzbegszbvhebehihcjgbbzghgjsejhcvrzghjhvsgegvwvetzghbjtbezrbcrrhshcjbgtveejjwesthtzjzjjrijvjsctsejevrbestcirzbchzrgwstijbhezjsrhrhcbhtrwtcwcsrgwtbrttbwztibbrwzsgrvstzzzgrzbjwbchrjzrwrigsrsirtsecwbrjihzegetbvsrgbtssrgzgsgggetshezrszhhccwhigtbcigvthwiwgvcbirwgsbszzhwvrtsgbjwbwsbgzibjjtjiieisztgzijcvewzrzrwjjrzescbvititwgitztsgvijhbgwjvigwzebbeeebbstvirtibvjchihttjbcgsczziwbvircwcjchbzgtsztejtwzjgsbwcrvibczctgevcbehrbcjcczebzgicbhhizrvrvzvvzevseititjceistgbsstevjhzgzeijjcjszjiichejijshjgciihcrrvzitrevtihbrvsbbtszsgtrhrbvbzevghstsztzhrejzzgbtitrgbtiwzeczzrjirwcvcbwrewihtejewehjjgweijbtswihzhwghrsvhrzgvsjsgzscztttvtbrbghsvejzrwbetcebstbrgszergvseigrgsgzjwrzscwwrtiwcwtvjjbzwjgbhtecthjicrvsstwjvwszvwresvtwjrhjztgriztrvrhivbtjecezcgchtgsibbjbtttezbvjjsjvvvbtgecebhzhrriwjwzvvzebtwsciectetgwbrztijwwhhjrcigzbjviercwctvghvwcwzbzhcrihgszebbvrjziecvghseevzbcggwjbweshbzsictziwjhzbissvwwgwzbiiewrcjwbwrrjjetghbvwwsrhgzegttvbjbzecbwrjvgwzvgrevswhbrbrbhsewtwssirchzebcbrigrzzswjbtbsvgregirwicgwcrsshgiggsjhgjvbzwtgtjczrewgcrjhztvbihsejvgszbeebsbihezbrsgtgbbzbwewzrrsjirzzistebvjtgggvsitvejciejtzstcveseczbitwbzzgirvczhcvchicjhbwisezgeeczswzzhrwtcwizzcevwwvigzjvczevzgthjggvvttcgzjihwtvcwtvgjigszgbiszwbbzcgzgjwricbczhsviejwrhhvvrgzgihgvegzrbhjwgbcgvvtehhtebiggthcrchiteijvcvzjswwjbgvhcgcwvgrbsgerwregwirrheheciiirrizjcershwitetgwcchwrrgjhjrhzshhtcjjchvbswrthjgwtrszjsitiwbbzztzzchbtiiszzvrteweevwcwzcervbczsjggizwszhhgrejgjircjvgjtcctrcrcvhehtviecsbjggrivzrvbhihjchhhgsjigtihcgerwjijzszwrebigjiibvshecbjjterzwgzhwwjjvvjervtrjhhvhvbthesgbhshrzrsezgtegwerbehzcvtshehjeiwvvvztwgvijwgzrrircrbjjrcevwtcrwwwjviibhgjsjechjjvbhtbcthibzhzstizhzwbvwghzjjwchrijjhtvjgsigtirgwzeiteizwtccbtwjgcebsiibijwzictseihvzcwzcszcscjctrjgcjvjvvwseveszjvbegjjveecjwhvhwjjsrbgizbbgcwtghthzhjiiegrwjcitvzghbjsgvccvwjszwijwggtjhjzzjwrjtbiirgetvritgtwzjcwzwzbvbershgzzwgigcjczcrzigbibstrwcbzzszvwjirbvtejwihwervttcscvzibissrztwgijjebtwvzvisrzjzzgwvrgiszbijhwtcwesbibsbczccrizivihigssvzcrczvwtighvwsitwssvbeggjcjzrjgcvezshvttwbgvvgwrbwssizvjvjbjivgcwbrcvcesbesbwvvsjgihwiibrgjhcjrgbcbtehzhirtsghjswjtiveetbvzevtjebvvwrwgvwrvtzzswhtcezcsbsrthcwbbcwwtbggjiirbjcicrzwwstvcvressgjgwjcvjccvvvhewrzswvttwzbhvihcwisiwrjgcbjvezgtwgbbtjirwcbggvtzezvviveirwrbjgjisrcbsegwrwibzitebvjgztttieesceetvscbhrbcrhhttcvttgwcbticcbtvjvtrcjbsvtwhswweswijtizizwbjiwrhbhsgvbzbswwejbcztwhgwbrgiswgrrwjejegeijhicwtwccrjwsjicbthbcgzrjcwcczwsjtstbbwbjizbcgjtwthvesrzcirzvcrrbrvjbhzwrhrtwjcrgercezjzwbirvecszvwbvrvvigjhiccwtvwcrejebchrrizezzziwshwtwbrrthgjivrhcggvhtbisegvhbghtehehjrsirbgiievwcwvsgjihjhgvggieigwbjbwiesggrrgggwivgigtrwibjgtchvccrsbwshjwghtcwrchchrwcczvgbghbwcztcsegrgcttzrwtzwrgejshgrvjctirhbcswsijbzgwzereceehzjzzrrgwgggrjrcstszjebrewiissghzhbgrwgbhvcgjrecbecsjcsbrzjbsssrwcbvvvzcirjhehgseteressrtizseejjcbjcbbvrhrvvczcgjjssiwhtbzwhicswrhzwhisssrjthbjhtwhrtzjizswhtezcbrsgjegjzstgcrbwbcvjgrwcbihsjzrzgeihhrtttewzhwecvsicswzgwvtvvtbjtstwbrwvwjjirbjcsbwccvthethgbecbttcibrtvizbgvjzhebibterwzhwgibtszirtggcscwcetzgevvvrrgebvcwjihbjzhjswejtettvbsgcgijcgtvjgwsizcccwhcrcjbzsjjtcsbeetbezthgewhbjcewevtbhcejigcevhjwhzjbvzjbthvvbibhjwrtbjzwjiertbesetgzvvsccreirijgvehbibgewsvweshjvzzvgrjtstcszbvjwjsgvgezwrrvbjtthhswchbsbzzwhgghjbvsrhescwijihheshjbrisbcgjvwsirtvwsbjbcighhrcirhvcczrvzjhhhiiitbescirtccwejterhescvtjvvctzvjjvvggigtbschzgtrgbtvghetwigcjcvthcgzbzirirwvrshvgwhisjewgrwwjjshiwbsgshhbhjcwezishrcbgstibwzzjccbbswjrjzgrbtwizgbwhhbvivbgjgtbhzhtthewcjisbsrhjrtjzebisegwsjgbjjwizeetrrcvhvirhgggbthghbjirheheigtcbjihezcjhzjhwcvwwhhtbzrghtbbitvihhgjwitchzvsggthbwsvgcbrecwsshgihhjzesbvserbvwgsrzisritihhebwbztbzcrjjwhejgchcibbczgcgizwzvrsrtiizivwiecgszztgjtewcwizvbeiwizwhjsecgvrgrejrjbzztbzvtghrtbrrweestiszsvvrbhievvtzbhsrrhcjcsczvivghjcbtbjzwrbhtrejiezjrjhsbjrviisbbvscitchjsewvgiwghswjirwgirztjiirgcwrhsirtrrhgtwshzvevsjvcjcgcszccsjizservrtrctjrbeeehwiwiwesjgztgvirtsegiecvvhbieshihtehghzeiwvvvhwsczihctrhbrstjbzebbhwtrhicvbrzizcgcetjzzbhjgibrghjszrgsrietzsgrwsstvjetesjztzzctctcbigbejrzrsjctighsbsvvwwgwwvtizchzvbewetbwhwvtvjicircrcthihvgtsvjhrvwihbtgbtgwjghgibbhihiwvbzerhgewggcvetjgewizhrbjgrhggggsvzvgjcigejtswctzjtwhgicccjgchwztsbjvvhjvvgvzvhiswwvrezwjiizzjhrsiwwtiwbrcsrvvczcsevhsgbthzgjrzhcszehiwegtgjhsrvcsbigjzstwshwchehvzbztgjjtsztegwrevbjhisbwwiirccvhiregeiwteevvgrbrwetgzjzcgethetjgeibzggizzgghiizcwcjhjcgwigrgrtebhhchcciibzitrszbjtzwtjcvietszjghsrzestzvbzsvctwzchhrjigtjceczevjigzwrthhjvishgscvjvbgjshwhhieszsrzzjtvtrsgccrzzztjvrchtctjzezwsiwssccsgrwrtvbtjvgzhzzvccrtveigcjihjbeizrtwthcrcwewsijhjsvrjbrbzsjbhziwezseivhrhcsjgzehtsrrzwccegijvivisbtgwbeitwhsjscviwzrwrgbbwzsvzvjjcczvvbjwwtecstsvrvsbiswgcgjvwteeizwrhhccvrsgbtgzcgbiczbejtjibvizghgissviivbbjvvsieeheczhzthivsvwvrbiehtwgtstcjjcscwjersrettwzszhtbgsrebwvrzhjsbbwwegcvjejjtrgjigzcbibitsetczigvgcsthstghtigbhcvwcszcrjgzzizvwbcieiswbwcrrtzvrribgirsezijijssieigwbhhrsbitggbehrzhgrwthwztzwwtzchivcreeiitzjsrjwwztrtbstirheeghjsvsrhwgvvbzgibtgzvwtvzvtzczcsjwcrbvcbjcwwhchhwwgztsivwesgbbgihrhzvvzsrwtgtirhrstjrbhvsjrzwvjzcwbzeejccbtcwtrczggtttswhzhtgjjzcirwsjtcshsjvcvtegcvbrrzbhstgrbcszrgtggeivhsztzcwzztbcvcrvigvgveswvbzwbcbvtwzegbrtevgsizzegbizjcisrgjttvgbvgivrcejctswzbggtcbccewigzjgbgrveebjvjczeeziweegzghessibwvwbttttvvztwgwcbhsgebbcwtzvvizjhvisjrthgwwbcwijweizrigwbbtejshvgbvbecrrgwsegthrtbjhihwigsrrwwiwtrrgebijzrthewtgzicjwgjgwieveejgvzbrjgvwbbecsjctvzbzhrzjgsszhwrrsjiwrezrchhbhhsscwhjitgzbecvvveeivrbercghvvihsizzwscwzstetbrjhcrrwtvtjsewbevjbtcsirwbwzewzbhhjbreivvgjiszvjvwwtgwhegthcgrvgicbejshibjgwwcectwetrwsihwhwhzztbbjhgeziwgstjerhzhctewjihhebtvtihcbjwtzbezisghhcztrvjiswshjtrbjwvebbhrhbczcjcgveivciewssreerrwszgrebbvvghrejsbegjcicrehjrccgjtghicrzegesvwrzwzibjrjzctgjbzghvgzghceebwgsrrhghteecriirwhvcrweshvwtbvwrhjgstghzvberswtgzrrvetzbtisvbgitczjvzgbzhrsehbjbreiscbwjzrvvizrjbgjsjjszjhvwzbwbgiszsghjgvbjczvctwhrvtzzcrhcbbhsbtbstsshjibghjwvjhhevhzrwgzhhigbbtetswzvsbgiwicrszeievggivgtezihcwistvzstijtctcgshzwecwghbrjttjibiestiithjzticebeihvgsvsezggbzsiizeecwrzwzwtcsshwtwtrzjehecwwsjtwggwbghieztcrstvwwcwvggjbsgsgbjgcesweigsrcsjsehiwsttzscvvtwvzcrbjcecvwwtiiwtscgzrvwibcztjctvrcctgvcgthiwsrrhcbwvrcbbsjwsetvszrhrvgghczwjswjwgzzcwhsitzgeectgiceergehbcrtigwjigzjjijvbsewcbgibwgrgegwziwtwzgbvstvezsrrcbhgvrrriegcwbishbhchtsjcczjsgcewhehcebrjschwthhetgsijiczccbsgehsrhwjrsjbeizrrjwtsebvzjevhwehzhwgwjzewjrihbvjjsrgbhvhwbevsvbtthvggveevsegvjzrzsezsgjwewvgijjbthtsrjwhevjwghzwwewvzjtwjjzvbvhbwtgjrwhsiteggvgthrzgseiwrwtbvecbbjciegzjbehtcjgchicgjhtcvtjcswrsgscicvbtcwzgrribvrwhsggjcwrbrcthetwbicrrtgzrerwrwezesezgjvcrgcgsgvswwvgjghrwjztvzjbhcshwevzreecihwrvgscwewzzgzhgggrhrcbjcihhizzbrcwtrieesjhbiwbzgtbwhrtjehiesbzszgccsrwjzsbczssevtwwejjsvvhcwvejhvjbbrrtejsjsvvbvvrezvesbiizetccszjtvvgchwjwrcbggzrbtrjchttszccjetjgzbjhvjrthrhhczijrrgwviibsbehgcbcbwrbziwiebvvbhrbejszhgsrhvrrgewbvvveejivwwjjhbsrhrwhbsjtbzjrbwwrwwvcsrzvwwtghjrrbvwjvgcjseteeseggbcjtzrwghwcrhwivistjjgtgwivsrviswcjjwvhvirtezrrsciibiwziwsvjwtgwttrwisecwzwzjcjhjzjtgbhbcitbejhgwwjiteejzwrjihjzrjwiehtttziwzzbwbsviswictjbijsvwsjbhggeghjsegrzttctzjvbiiejrcvgsvejtgvrsshcwjtjwchzbzbvreccgsibsbijbeshsihjbhhhwctcwtjgehcrihrctgijwsbszrwjgvhzvgizizthrcicrzwgtvvbswzwgiervhtrjscswgjbztgrzbshzwvcjesrhhcrtgicrbczewsirvvbcrrvvvviwbegtsbzwjrwrtchgritectcbecihvtztriwwbwrtzvbztjwzgzjghrbrbhrzzsigiwgszcbrwejzjswwegiirwrtcgzhtcsgizgvctirshscisgsicerszvewijtttczcvsberirgjrrcsgvgbzetvwbzwgzhbghjzgjiegivzrbbrhhereshjtsihwjzgtrgvgvbgwtcvsjwhsgzctwsjecggvrhvwhvcsetbehbehtgbrrtrcsvzeswbtjwwhrchbgjccgrewhwgejewwztrebtjibirtgibcjejstcjritrsvieejthijjvhegigisbvggvittrjtziszihjgwwrzhzgrcccwvjwvhbvevzzhjrthcwsswhjivzitjbvezbzhhshzscbgzzccribebwhjhbctvwhehtthtsiwbswcjbzbshvretbtsbsjwrvsjcstbsicvetebbgsewjzjsgvgsgjtigwwgzweishhgzbgtwhttvvrjzvhstcivgzzerhjjzhjgiwibjtewsihcbgsrhtvrgczhbgtrghwbiizswjviwthcwechwzssrtwtrthzvivetccegssjbswgtvjrsehjzzztwgcthtsgvrivbezeiirjehvwhjzjvczbccretchjewttcvgctibwsibtctrcercetzthvbwrhrsgvtevhvhtcvishbicivhwiesjvizihiwrwttrscizhbrcbwwgtcbhvswgbrghgvzvitgzzzztbcsvwhwzjzjhseztgtshcztcvreirvgzzcseviiczbrchvsbeecechtgjjwjwwgjhgvervvtresticshiscrirzwwiwcgwttecgrrgicgsbvhbsjvwbewseieshzrzhjizbzgijjvtbrzvieihsrbcrrebiiezcwivcwtvtghrwzjweisjirrtgzbzwgcisththvbtwirvzcvzzcwhbveitvizgjrjijrethctgwtbhgttcsjhjjrgttszthhrjrbcwhzwthbcbwbzbvvwgghwwgecshvzszzwjrzvzvterzzbvejrjziszevsbscegrtsszsrbiegjvzwswgccgetbijgewbesjsrjhjvtgzetrzjhbhrttbjerwiegbjjcbbezjiiicsrszjgirjshzhrwrwberbbcswebhrwjrstigiegvrjbgiswszcisssibjhhvcshcjrscveszhhjebgezwsrzvbcvzgshrrvreggiztctgwzzbvzzvbrjwtvjhijbvvhirswzsbrrvthwthcshgvvhetzgsirzcjbvrrrgggztcsebbvesewibgjhjhjshggrbhzcchzhechigrcgwcsggebhjbgzswtwctgjregitgzithsscegjwgcrhigjjbbgwhrcbcbjbivvrittiwisbgwtivicwtcitrchvebetiezhesgjciwtehhwzvctgeshscwsibttjgrhziicvsgetiwbbhcivhcwrrvzvjswchviztbbjwewerwgewbvbwrctjtgbhwgrjiwzcbvzsbtvitcrbzbrrtevizcvczswbwrrteggvhshhzjvvwcetzesjbzvjwezvjtrehcjggsvbjiccvvszhtcvbschssbezgjsvsgetrjrbribcwwbrszssceejsitvvbejjjcgzzsbjishiibzrcjhwiectvrhsbrcrjhsecvwtsjergbscvchcrethvievhvsgccicectbecrbgiibzzbiwsrwtgzrbbwwgijtwzhrswvzzscwsvzhiesrwzgeshvtrrhbbeijrejgjibgcgtvegzwbveesthchbgbewvjvwsvgjehstiejezggcvcesciwjvbtevjewcjjzwsvjszzjgizgtbhrjbhtghhhwbjzteichjwbbstgrbsjwcgeweczttbsrecwezrwcbwbvheitbesjgcejwribewejvzrhhicbtzzbsrchjieeecszsibwhweeegircrrvghvweightihtzgjhswswgstwrcbbgbiervhswiiiscvsgzwshghcjiivsztibevicbhvircvbrzzjhejebggwbezciirjsbtbgvjwreevzgwiswwicgzzzicstbvctjvtzsecrzbitjjstbzvhzztzbstbwbhzbiscetvgirevvigiwhshvttcbgivcsizjzgvzzstzrctiwwshzcwhjzvewshgjswhzihitggjzwvjcvczctrcrrbrighcvzcreihztetihwcjbwevcivwcrsrtbjerehrtsszztrvcbctsebrtvstcttjzisrjriivwctitvzegvbegbbrjctethzthrbitezhrrcwjcgijwhrcjhrzttegeiscgershcbjrtthegiwgerwgscjtcccieebbvjezrzcjgiwsbjzhsvibjrhzvhtcewgtwijhjrsbcsrbbserbrecvztrwzishvtcvtgccgstrvrjzswzzvevijvchhggbiwwzriegjbewiveriverzzvwswjwjhjjwhgtcsssejhjbcbtejvggbcetgwzvebsizcggtbswzjijzszgcejtzbicezgeivvrervhzhiwbbjjgrjzgeiszjrtszzsrtehrzbrecjwwsetieewsgzevihjsivwjhtgbzicztitjetsevbigwwvhgvzcghjsgtjiwvriscbbsgsewhwscgchihhbweiwwcjbzjwvrrbhezrirwgtvththizrwzttetbtcbthrzzcweibgbisetwgjhgszicbehezbbhseziesscgbesscthwczrjigsshwhgigvsirsweswrhhecvhcbshgczjzriwrcjehihbjwcjccehzsssctwjcwejtsbvcgbwwjvrzgcthjzivvbbzzcihwisvvwvcrwcbbscbrvtbetbhvcigvcrcjchwbvtccrszrtgsrwgstzszbcjrghsrzjeeiigzzbjgcwczgsjirggvhhzbevsgzvvsgbbgrrczwvbeizbbbgtwsrggehsbscizwbbciertrerweitzsrwtehtestcwwwwehebhvjgecicjjjtzgetzswbvvvcisicbwtgzrvwriherghesbizccccwwrjjisegbrwjiztsztcehhzgttszgrhzgwszwivcsghjrrhjzchrhbzvbtgzhevesccgjvhczgwrbevgbvbreczggebsvthrvtrwrwvwhhjwesgvhhehstwshiiwbzbhgegterszjechztzvhbvhiijhbgetgrstwibvvsrrjzhiwwhttcsetrsetrrggwtwvvjbirbsciziiscssiewisrcshjtgwszbrrzevwetihetvijzjcsgsbvvwvrijwtggwihsvrjtjwiggcgjjhbciiwzherbbtthezirsjjjbecrzvjgghttwggrhwrrjejbgithhgjtstsicztjsvggzceibebrtevcszjbwhesbjsezvehrizzzhsrsrhwegwiewzwsvwbtczwtgetswgiviwzjcrrzzczgtwzhhvsciehhejtgctvjbwrtzwcvwtjzeigcebgtcevrzwbiszrzgjbgeijcszceezgbjvegejghvgjtceiwijchjizchviwscigizitzvrtwbcwvwjvbbsvhhrjzwwiwvvzrvecvjiieigiiezcthrztzjhvbjzzezizbibhvwejtzzweijgzgecheveigwhhzvbgeiwsjtczsgcscccewebzerjrshvrbztwcjtiswhbhrcgjejvtvgchtcswiscbewrhrcbwwwjgbwjjjshgizhjerbrwjbbcrhctvwhhrsweehghthethzwwvsbvjwcvzvwtibsbbwscbijgsibjzwzcsvbvjtcbebhvzcwvrrzhscsvritsetihsgjwggzwzjtwsebwvtetsrcgsrhzcttbtghhsszhvhzezrbtcczwzbbwstwrecisiwsvrvjwttcjzegjggcrtjrwewsvztvwtitrbwhihgrjtzrtggvhhhzczswbczrghctiejerswcvcvgzvjhcjriwcbwzgszivztwzegzvhiezzhehththwzizteewjbjstwztscbewwrzesestthjtcgrwwvgjgjzerrbbsgjtvwetwztjhcgwzggtshzjbvbcgghvwvswbbwwizvjgsrtsrscjbjgetrzjbghitjbgzczsvejwbsrwwvhzzgbigcwstvevijzgisicsirwgehrzerhgsebwegzegcvistcczwrgbbjvzhsvjtgcbgvgtiviwzghwscgzcrwewtzrgvvztvwwhwhsczbivhrijhrrgcbzrcrbijvchhbsjzvsejzgrestbhbeweivswzttssesrthhscjisgbegcsbhitirgsbgtrhrgcshbvrzcgzsriwrvbezwtheibwjtiwjhcjjcbwsrvwtvwehtbwecscbwwivircshtehchejzhshhjeswihievzhzjecgettizccjrejgetcbjrhtizhztgsihbttjztvrvttstvejczgstghbhteehgcvistcvwewzwczvwettzzsrwbcsijtvghvicwrivwvhssjjzhstetszvrshcrjvrhsszttjcsbrjbcivsgebbgzgttgisvrctwsiwtieijtetcrjeireecejvzhsvcviesgzeejergwsjvbzjievbjvetvhitssbvzbbtztesgzbebhjzhbehebsersvcviecsecbrjwrchtcechegcbwseithtiivcsteszszvrghjcwizggjtcezwegzzwziigvjggrjvczszzjjvitbsgwvvtethscgehcjevbggehbzrtrtcewwsrgtbghehzccgjgvtscgcwzzrvwvwrggjvwihcizesvsisszzzbvetzgsrjsjewzvbbzggrjbvbehevhrjsevhicvberbbibwhcbciribrrwrhigsbssisjiwcbjhgzvctwzbewtsvshzwgberzietsecjvhizthssbgrvrjssezggwievhjwgjvtczvjgzhiwbiigirshgtgtbcswzwijwisiirjrierhjrtcvijizwhccrswviwrbhcwjewizjwwciccezstsbjhbwhzbctwecezthtvriebtwbsccczsjwwzrhhzsirgjjecjvcjthiscjtzvebwzgcthvrehwejetcshzwrvgewesjggsizrtrziwzvbvehgwhhtrtcrebchgebrsjzcjbjjjjhssczhrsiebtsvzgevithwzsivcjsggwgrcetbiitsrbvwjsczhrvwwgrhbwhtiezgricweesgegjwcjtsehsetrbwvhhbcrzcshthvbgwsgrrjvwrzctwcvbriccwsvzhtbvccerhjejzgeggsewibtcrtcvcrhtvwzhrgbjjzezghhiircetvzwjgzgtwjjgcisbcbrztisbrjewzibjbrggvicceshzgcbibihswsbzhhcizrwihsvhceztshjzisrjiwchivicjbwwjhwcrgivcrvbibvtgshzsiibvwvsjzrsirgbvwghrviircwvsthsvvrhbgvbchecbwewjcwhjswevbejwcgwisvrvthbvvhsesresjeeewsehwgrbbbggwceihsezszttbgbjjwsztvvccibjwvgbijstrchbvccsbrzgwhgwbvhjbsssjhrtgwssvwjbjzwtzhszwvhgvrjibhvrtgiesrwsrgjgsibirvjgzhvjvjrsjwigwzecwcrbbwrscebehiztrttbzzsbgbvzthbhrghjjbrjzhwhjizhchsgicbirsgcbvbzswhcbizijhvbtesttettsrtrewtbwwzivjbzzzzvtvbwzrtbeebjhbgjirccgbjsrtvicvvribhrrbjcjeriirczthrewsbzegcczsevgzhbzibvgrswbjezsecrvgcthvgjttiejehhrgzrittwgrijssvirzjribjcghetzibzjvbvrzrrhwzhbtejgwzgwrchzzjbszgigvgjbthvbsejwwcvbeizhtivsrwjzwjbwwzteeczjghhgghthgiwtgrevtbrhsgttivbghgbwcsbwzjcgwrcjsvsvcgehvbsrejrswhhttbjgsiersesceigvbrrrihwziswsretbvhezghehzehsibertghvwhgzhsczzzghjhgzhwvbjgvwiizcrbjchgbsbscvhcbischzgctrhsgcgiiijjcgsgrsrssevccvthzzjwjztjvviwbiiebzchjvjwwwbrhrvhghhigtcsgsbvjhegbrchzzgjibthbbcetgggejibggcszijzjhierwvwzvrttggtsevitgvbbcwrszzzvsbcisbzgzsvrbzwwtzjjjrzzsehzebjirwhizetjcbgbgitcihchcehgzzciweghrihvbceejvzwrssbbihcsertshvbrrjwchhvwrgssrijbcibjwhgcczczchwhjcgjtgbciwrizhzswcccrcgbsevivtstzsswbrbzcijtzgetjiivwjwrrtcehbihcejhbjstjrtthhbhhjvtiwzgzevvbrrtwettzcjhigizcezjigchijjggwrgwczcbjebivztbvjgvcwgrejcgvjcbitrchrcczwwegbeezbssecttwevjchwcirjsiwjceziewrjjwrgswsjtbsriwwwjrwctzvvzwsrbjwsrwtvszigwjweevjegwihevvtsgtcibjebghetechizssjvisibgjgrigtisbvcsjtcbtzwgvbzegvjjwhjbsbwbcrggbghijstcghsezvsvcrjsigzgtbhjibztezvbrhvjzrgwiigrwjztrehsvreehhirjgrctjcjzrghgghizzczwzthccttjizhzrbbwtsgijshcggebvjrhwttvwzcwgcijhjzvwgrhevvvgejbrbejjsevjjhtwwvjvhtseiejjegsewhitebjtstsjbjtzjribjhbcegezjtvwvgwvrggrswissehhtvchhswtjvcevczezeietrjjegrhbjvccrisjrgjwvctjbtcggewvsbhzjjtbejrhrrjssctvrsssbvchezcjzwrvzeevjewssccvzhzchbivtjcgeiitzejciscctstwbrhhecrzbrhgrwgbizzejzvjtzcwtjjiwtscsvtgbgsgctsbbwirigvvhcjgcgrcbjhwwtgziszzegvhbteiebwtwseviriztjcriwszhbvzwzihtzzjithjtvtiighgrtwezgswwsvtgvicbicwehwbszrehstbgbvschvjjhgsizrsjhzsrijwgbbbjwbgregwttvbcchtwjtiwigwhjtshbtcrejcijzzbvhrzztirwsijreejwsizgvjjvevjbrzbbjcgizjvbjvhtbehvveehrezwgvjisjwezzbjsticzvvzwwgzsrgerwhebvzztgtriicrviegrcwrechcehrvjgtbwiersiijzcgcreegrvhbgtsjgbihbzvsghsgzcivjhzwsjjiibewgtztcizwhhigzvehihztcvjbhthbhscstscccvhsivbsezjgwrcczhrgbjetjirbgwrwczsvwrtitgzwvgrgscejvgzbttchezgrbzigjbhsvibggjwibctvsscbvteghshewsbswesztvgiwirvcscswjvvzzsviizjcjbzbthtjzhtzzzwbciigshsitscrewwzssticbtrvsrieiezisrgrwtiijreciibhihscvihjrvesjwwhztztrcjweigewttgcwwchzztgwwiicgztjvtiwvjwrizzsgiwhrzrbcjwwcvwibvgcgbcjbsbtsbevsgwicghhbrejggbjwrzcggtevcztsjehgwttrzbzttthzezgjieeichhzvvjzrvezcwcwcwjwctjrjweciwisrivijegrwzcwbwzbswrirwcrrvvieswwjgjsigwvvcwcjjjgsivegscchwgizcbhhzvgibtbjiwzbzrcbrjjishggrsgsvhgcwgvgectbcrczebjvzsvcserisjebjrcwtetecjicgwihjhczrsjwhsthhvergjhsejjrsvvcgrvhgbricrigjgsehjwjrzbvvetzircwbighzwhctzwcgjwtiresrjibcstrbgwzhbethzgevesrsgrircvvggvvwiescswhjjibgttvzjgbwvgsthbeieehsbjthhcwcihhjecejeerzeiziirgwrzszcccwcshzschrgjejghhhcszgwtcvsvtcbtewrsccjvegjrcejgrzrgezjjzsgeehzbcbvwhebbtcswrtbrvvhiectevichbtcszjzwrchgvtzwrbvwsttsivhcbczbsjccizerhggcwrjvcrtjjrgcwbhzgghghggzbthhjsrttcghtgcitgetgtvrvczbgbiissthvhwcibgwvgjcvcbztrhgccgvsjigvwjgvvgrirzwwwvgbbzhsejwhcbcbhgjijrbsvwtthwzcijsjhgizsivrtgwggtcweitcztzrrrgieegchbcrhvcerzghtezbibrrsbcbcrgjsgghbizzrhgewzhrrrjtrjttrzzcbzhbbjvvjevrzbewrrtrbtwecgvivrcithvrehhbshzwcgeizctcitwtzchwszcjvhbsssvgevzbvgsbiihsrvrbetjtztwzbvzvgejbjsghgzrczhjjjttbbjzstjgizbzjirbcwewbwthrgjgrvgtjgzthbbhshgrgrijzjrwbtsizecjtzzetighiwwcewgswzcjgvtghhewitscvwbibtigcrjjvbwjigzetjbjwzeiztzeejbegtbrstjbirszbtwbgzsiccgeeteizzgeeiibgcievjjhcjwzshtcvvzrbrzivtzvtbscirewwcgivjjrwgvhshsbvzhbsetzwereecwcrzigbebcjhbsggbvirzwrigrrrchiswbvbzveeewcgbghttivcccgizcbzhwwjjrjiwwhctszitcwwwjcbbretsevzhtsvireitejiwbzthvjbgwwitrvrhcciweetiwhzzijvigwsbrsvjtvczcstjghivttbtserijesijvctebsrwjcrshivivesjgssbrvrbssivirwgrttcbwwwiibtjbhchvgrejbihsvwzbhcheivhiisjsriejtcssrvvrtcbvbbbcetwwrvjshrjcicvesirtccjjezshsbzwjrchgtibbbigbbzizsbgtrzghvcjveiergtvrswbjbwjrjejjwcshighrrwsrgiwhejjtzjzzwtzsbtgtvccrggbrczsebjwjwhscvzvvvjecwvevvhwbteezhijijjrrjwjbbiwhwzrzwcrhjwhjbveewcchwtvhcgegztzzbizjjwztiswbhbwbsivtgvjssjwvhwthsgvgtrvrtbehstgvvctrvjbrhwzzrbejwezshcirtwrrtwhsvewwsbhcivvrvbezbccgsvcecbwghzzrhcwhzhgewecgtjjsejrtccvjisshwizivbhevtgihbcrzzhgjbjshsezwgvigbscjitiithwcgtgrvitctzirsihzwhrzwtggbvetzbhreztizrgzsvgbbtrjivtzcivvvbsscejhbggihhvrwjbchgwiscgrhtebwzzsgrzbrhcrsibegjgrhbgswigisgctbjzhrcczsribzreciscjbthjewtbttjsswehggsjwirjbejrvcihweiijvibswsvhsiezirrwbsbcgtgzjwgccghsvwwvhecwhsibhrwwejeebgtbrvzcjbwitbgshjzrrhzvievrbbsrwbsicgvtbrwcecthtwhrzjjrbgitceggtigwhvjwivrbihhgwgbrizcrvbtwwibviesvsihtseecejgchtisgccbijwiwiisrsctctjzvztswjhbcieergbwcrsweihtviwijttwccsgvbtgbjgbibsrszsigigiiszewbsetbcrbgvzbrschrbsiigvtbbwbtzhthvcictvtwgceisiicrvsiieshwbjihvteigijwssittzbebthczrgwgjireggjsvvgzetvswhececzgwrhtwbrcsjhgweivtzrbsvsjsezshrhgstsizibjhbzbzrgwwswrczzvwevtwsescivsicwbrcewizzctjvsewrtsecijjghittgzswwsebrhcegcjhwzeiiswgtrciwrzviccjjrwjjbrsgbwtrtjetgwhrjtsshvhvvzcsztgwsebjtwrgcttbrwgivsevtjtvwirbsigjhhhtcejvgeisbrrsrcesceiztscsswejrghsevhcbgstgwvwghegrzwjgehiewevvvzjestvhrsrctcevgvztircistwhczbcjevbrwhhhithtstszrwvbvsrhtczhsztswjerbvhwthhzzciishwghrveerghshtjhbgiizhjjejscgbtjcwbecgetzetzszieteercsewzihvrizibrvszgsithtjcvrjsgjzesbvizisehtcwsrctzstgcsszvcbgrzitwcwtbstrrbshjcsgtcrhtgsberviijstsrzsigvgewzigjvcejsvcrejtcjtittzriwwretijssjhtgzzwewsbwcjwhivzvcvrijvibwshsbbwcjsttcjztighhsveztrwsrgzsczvcehzebtvczczrgbbbsitrwcszhriiewtjbjzbhhgbcrbjrwhihriviegesjvrrgssiicebzzezbejrcijbcctesighgicsigbvhzcssrswvstsreevtveitvgcrtzwreirtwsvbgcvtvetsggerhrgwicebzjgbhjrtsrzizzrbrbbvzvszrbjswwigzzcjcbrictzvsvswhstwhvrjrcbbvvzijwtgiizeshesezevivbszjbjieevczbvesrhjbrjihhszisbccwgewzvchbiiwjtrjrtttjtsgscstiiweewsbzgcwjjvztvszzjzeijtzbgzwzbejhbgwrgsbsjzeecigiigeccwtwghijczjczsrbjwsccvitgettehgvsshhhriteevgstrvhhttcebrjceirhesbbbtgcbghjthcsehcvvrscivvtigbizbhgezgtricirbrrrzwhwzvggethigscjvwrcsrjbbrwiijzseibcwjzicjtgbwvtgizbitjrhzhvrcszgbbtztwwihwtvecbwchwthgihhjjibjzticbvebhtsijsjgzbhsweechrstttgzistjwbswwjtgwjbgzjtgcwhgggizzjjvbgbceiceghiihsvwhzrzrztrjvvbsgwvghzbwevivwwizcszrrihvbwczjcwzcvrctgivvrgcvrhbwerebirvevtcrvgcrbcwecjiszcwtswhgebczwhiwchvshjsrrtizzivhgrwrehhhhrwbhtwrzbrecjseireihjwgtggecjgivwvcvrvivsrtigvrccsshgjhsthswggttrbhewwebhzvchesvhrvzrivhgcrgiwsvrtrhjwscjwrjwhjiztwrzeheghegjejgseszrvccrbbtewjvwrzrjjrerwjcjrvviwrsshvrtrsithshtzvtvjgbigbsjzjeegbrgiesbvhbghrcjhcrgbjtzbcbehehbrwgsjeevwbhjjjzsriviizbirwgscirzsghgwtjjtbjhhisrswvegzjtetwbhvvvjzghvjieijwschrtitehvrheigtttsjbvethijzthzwseisigwseswgvrrcswzjvvzbswsrivcrttgezgwitcetrbrrvwttbezvvzgivejtgzsssjtjihhjvsrrzzhjbtjrrivwbjitzzsjzztzbhztzwtvgieevvhgvezzwvisgeiswsewshvzcgjiihgcrcvjhhigrevzgiegsetsszsgihciswbgrrricgzesbvvzbwrtgwssiggswgesvezhgrbbsghwrjwzcccvhgjwgzrwtjwriievihessheezsrvwcvvjttctzewwehsszrhczjbsbhtvbjsjwzrbrebcejbzwrrhvgvjcesrreggzwzcjsrjiizgjetiejbehschjizrhigeicjiicswzibsbzsrbetecvijrhbstvihgresejccterzvrcegtzvzcbtbghrbsvbtbzebzwhzgzsbizggrrcwjbieiihjrzrserhjiwejhiightrewjhecvrtvjjwbsezbrzcjzvvwszetscrevggcsirzrbcsrrizhgwrvjgsctittivwjweeievsrrbveihvcwchczhcisvjzcvvhbizctbhrgvggghwrgbvteczijisjewsswbhtvtbvvrshtierhcbrbtjezzwcbbestcsetitwwtzgtjvgsgietizijrhbhiiztezhehgeezeehesjwvstbhsiebjvwwtejzvjcbihtirczeejisiegsjzhcrgwsbswwwwibrsbrsjegizjsbwrcjvvtzgbhzecgggwtstgbsittcvjsewevshtcrejchtvirctvbehttretctehhgjezeztizwszgvwgvhzrwchjitvjbreehjjgsjzhtrbtwtgcbvwjcrbtjtiveizgirvegbijcichwcjzrzrtsitrsiwessvsghezvbwjwrgezjzbebgsjrbszsbrtvbrjsgirgrgjbwhvvtbsvgzvtbwhcwcbehtzbwtvzghbrhbrjzhtrebrjtrzjjhvhbwtswhwcjzrzbbcgzgrirssbecevrijervvwitcewbbcccehsevwggvwttcbrsicvhbitzwetbtsttvsvzstbvttwgrgjzccshvvjwherzetwvitzrwbihctestvvjescswbjgctgtzervwgcjztcbviswzjzhiswzjwgvwihbttjwvrwtrcgzzjwvjwejtcwzcwgerwibgisjbiistehjsgezigrzbhibvcjjcwzwiecicrebjcrseigtghgttzzhswgicievwthrehigebbswcbbwewizeihghrreeriwwtebirjsecbejzbbcsvtrvvvezicbhszhvjercgjgcjrccghibjegwhrwssrctrehthiizzttcgicewhhvshicvhscebjzssbhzchewrewhrrezhzgecstreriighgjbrbtswbjigghgtjwwvtcihiezehbsrjgjecwjstibihhihzwwrtvisrhwsvrbszsivivrjvhitshiievcczzrijhcjjizvtiecwhgzjjzjgtwzwrhssgjscsjwiwibjsecthssitctbjiebgtcibjgczwgthivtewgrhwevchishhegzthwcvvwecejtiivbicerccbhbczjggtzhihcvjbzzcgcbthbsgbssjrehvherhzivhcrtgvehetjjtjzzgrrzzzjhvcjvveccvtcczrvcwestewvgczrvwtsgjsbstbzeterjsvtereshgebzhchbwghhthjvvstbrchwbbegtesejzrhshbjrszticbsjtjhwetwzwiivtjhiwrgewjgrzwcsrzsszgjreivesbzgswwvhhrihircvhtwwebgrgiihhgsgzrwvrgwctgwrbwgrhvgwwtjszetziwshgrwesgerjzrgcwvrjijizghwthibtrgeijciictzrggizijczgcezhjtrshrcebrgrbhzbvztwrziibvvtjbwsvjhrzswseewrhcssigtsbbjvrsjzseiijjbsitjiejsgevejbscjjrijebticiigwwweizhisjbebwwsssgttvhhrzczehjswwetwewwbwvrtrsswhggtzijwbsirezjwejtcettziwjjjshrgebiscwjwzsvjgsrtizrhrwvzszzjjtihjgitercstghzsjzgiesiijwzichhhivsczeijhtvzthiibetbstzcrvjiizbvjjtteizbewjrjvrivhvhssecegecvrvgcviwwvhggzvtsjrchwvjitvcgjvsiijgsvvztssvszwjsvietizcczsicesvvssigrhtvbvsrwiittbzizwsrtjetehcrwzirwsw", "alflkudnnayylualdlqlklyofomfoooqmnmuakdfxqxlkafxopolmaxukuopkqqpllafdpudlknkfdmpqnodkflnudxdkpdylyqkqayyfuqayxfaoxyynflfaqyouypmxadqqnfnlmxfpunnuodnyqoaddpflynfkyfxdqymmxoxlpxfqomyyayylfunxlnxomoyqoqnkpuaypmaqqflmaxmnmnxfkypqaayluakokuoxqnlyopfoupdquoyfxupdfklmdynflxmkouqdlydxxonpmopqfuquyqufkodopkpaqlxoopoloafqpxopfaaddaylxdxmffaymllmulauolkopouummfflxqondaxuqonxdploquffqddxfdknkxnyqxpxxmnnxpanxuxlnupynykfnppdoouuonunlofudxnnloxkamnnxdoaknmopquanfkmpqlmmlxlpkuylfdpypxdxpnypnpdmxfmdxqadnyyuymupdfkxpaaakqloodkdluddkmadknnadlpmulyunfokddnoxyuymnaukdyupmupudydmxoxodppfqualufqxmxxodknulkmmmyfknfxyuufaopkpmoqlxdmlpdomlxdaqnaxpoyxpuokudqfdpnduxfkdaxmkydpmolafumodluumlkuapxuuaappfkfkykqamkdfaokayoypokquddxkddlqknolqommadolpopuuukqndnxpnfnmdqoopqmfdmxlypqlxdfxmqynmdkpppfpmfdadpnxnaodmfldmkxapqdpllfyfnyayyynfolnfqapxmxqyxunoklqxppmoyyoaoxdlkxmdfddmaynnanxyxnamofpmfayyymkuayaxkoomqkfpumaypfayynlundxamkxmflukluynppanmoxyuklxxuqukkpappkfmuonpkqlmmuudnuqdnkmppqdyuylkdmpkuyxldlmppdulffypdpqfpqkdqdoukqpylnnfddmmuaaynydaaqpmdnqdmpddqloyqauoalpknyoklauqqdufufyppulnnkpoxmonmlkolynmdxknodkodopnxopldmmfxdxxpqypmapaollpmludpofolluxyoappkxnopoyllndnxyoqoxlqlpoaynpfxnmympyxpfolxpankmmuxndqfdfpdpyqlmymmuonouypqpnlyxmknnpdfamluxokquyfaxmkaykxknkomyxnlyfxakqnanlllnmmuqkqpymmlmuqlylqymqonukuuqyxumylqlnqaanmknxalkpoldpoxqxfunuqloodpqmkplqmkxyuqmxkafdxpxkonpydmomyofloymaknykdyydaaafxxqundnyfnxofduymnxxqfpoqnomylkkupooxyfyfyxkdknflukqdpnondflklodkaklymmdnpdmklopyodyqyqkppqykqunqyakulxdaumkxymuqnuqqqkmpoxaadpodyfdylokmamqqyqamfkxudkfdollpkxxpkqpmmuuyfuadfkmmuayyolmnnpldpufapmuuuauyndpkfapxkflyalxnqyfanxklkqxlnqxykpymandnnqyaoqkxolfdpdmalnollyffpqypnmapxlyonfkppmknpaqffqakqnoaklnlunddlfmquppqxymnymqlxfnukdooflkpqdqamxdydydyknxqmaoofladkdmxdxmdlnnloaxmquyoplfmpnffqyxxfpqlnnnuxxapykoxomqpdqyyapxolkyklunyunmnqdplyfplyndooqloxxuakknlqaqyffkqmfmuoloydyqfudyanamndfyuyxyqdyqnxyyykqaokumyxofxlfkayfflqlakuxmykkypuqmqplmkpyqafmooufdypddoaqmpdlymqafuoqdoqmaupkoxaylyqyaynpkmyyapynmnkpauyudkqopomfxuqnyxlyxqplqponklxpoymdkxplxqfnoxukayquxkapqoyoadpduqfndppllmdayxalnladmxfookkpyyludknfymoqnmyxlyaopylodmfqodyodmndlypudkkadmulnlokykolqknokfnmukukyxufukdaxlulqxlkalkuukyxffpyuoddadyqqdpfmuqfnmmyodoamqlkpmulnnxqxpaommqofqpfdxyyyodoydakxkxkdnfxqknafopqkanxynknuxpyddkooyfpyopmkannqaxpauadopadxamfyomflnfpmxqpllllulufalmdnxllxpkpdyomupodfnupaaqplyklnypnaoulyquaqyoqqqmqkdqmddkkpmumknkpfxulponpfndyfykxdmxpodlxdqduduuqlyxypalddfqafnaxfupukypdfukpyypqdpyoxfpyxdxonlkudaqkpkkuxndnpynloaoalqafmdopmmqplmfqnxlkfoapkfadlkxypapapolqumnkapuppqmlaklapakmmqlupxadlqaoxopmpkkdnnmxykyooundlqlpxoffqauxkqmpylxlymmfoploumxpfnoqkfnppllupmyyaymyqklqumnnyponlqolmfuknmfduuxadlfqlkxodyayxxloopydymxuxkfooduypxauouluuympokoyldkmxoaqyaxoquafpanqkuymodplxqyqdmylmnklyuqxdnmulqmkpnlolfnqadxmunyoaqqulauaxlxklmnullayfukpmqnqaxumaaauadpmolqnplmpknuuaqdonymnnfdmukxqfmuafklfodqlfmyuyoakaoklxlmyyauplpqnuayyandnloaunpoquaudaqnxoxplopqnlnuxxlqoaxullqquyxaolklykufddfnyynknfpooafldnmmdqpxudqlfamdaapdfdkdpuomfqmqfdqddmmupqymdmaqapofundnqofymdqaommydnkmuodldkpqmfmoomulaffmduomndldkaffqmuaxuyqnpmyxyllofaupxyomypmplullklkyxpyxxqqdafmpuafnlqxkldyyxqpxmmpdmqdoqqxnonffqmklplnqlknlqmpapouypnnxpknqmnmaoynloldqxpuoukpundkymxlkyxapafopulapmlonofymdkpudymqqndkaqufmdyldlppfmnnmkknqxykklllnufqkxualxylfxuuaalyduyuydonulomlnqyqnnoyokqkankxnkkkmnqpupdlkmpkaldnaqlmnfxuyupqlypmxooyxxdqpxkmxyunudpaxudnapdnapnloakxolkqoxmollxqqqxyqouyxooqaqmqkdkuydyfmkdfdkookyudayuokdupmyqfqyxmxuyulafyyqklalxxkdmxnpyplnyyfuadffquakqupkqupdlxknpxfxpoofolndkoddydmmflopluuqddkxyummydxnkfmykmxqlqpmopkldplfuxxxpxaanxyluqkxaonyoppoyfknmqmuudamulonmnakmdonnfxymudyokqofldyykafmofpxfnyyfyymffpodknamfkpapmaxyxxulkypnllykopuldkfnfompodonkyuamxxommmndmuankxukpdmyunokpoyxnfnylkaoxoaufomllaludxynqnxnkumfupnoufmaunkmnuoxkfddadfyyqldllofamopkdumoyxyfoaykllqmmpofpluyuulkyyfmauqdqyxdypxfmqdpyopmypnnnxaqoylpnkmqpfnyldxmuqallonqkyqayfploxduyxqldaykudfqmuqopllmokmoqxdpdkomufnanofqqmkfykxaayaanxldoqonxxpuqmlnqmmqomdqknpxxkfuokudqmyuyqalqxmaadkqllpfxldpaflaaaaxfndmaqaaoodapxankdnyqdmqqomndakluoxlddukfondulyqmkllmoyuafnpkauukxouqdxnpxfdlpmfqlpoufnllxoxkpqdpupfkapfkyuknkdflfopfnkfadklyfaofnoqyyqnqndppyxqpufanqmqknmpdkqlffypkmfuqyoaoympmpumnaypymdxqfxuomffxknkuxokoquxqquqdnyappaunadlfuqkxupudqqyuxqaofppoxaafoxydpynnopqklqxoodqqlldunudyufonpumlanafyfoaxlnqqxkofqukpuxnomxnplnaafqapndyamddkkqpqpafmampllxxofnuokuqupxkoudnfnllqolodnqydoaxpaomufpnppuoxkqaypmldfmqnaklxpykfmxdnlqmmmymnponlfymldnyupadkdullxyulxqnddnfqpmydyfkdkaxfqxyuldaudodylmxyaqnlfkolpaomlqnkxunxonumlylpmxqldaqoplquxxlpodlmykpmoydmnyflfoyoapmfkddponlnxmypxkadxxndadkdmdyonafkmxkklddyaflxpdmafnnyfklpuxukuxlnpayuluxkaxoxopymanqffxyyodoupypqnpndyaddyopoufyyopmnokyauqandlyoudyknanqodaqqqqlofoxaamlxmfoqammndpaylkypflxklmqmfqdkxmoqdppmaodndoqnfoknonunqxyfapuouqpyaffqflkudmyfdpoudxolkxyfmquoapnomfdaqxdmfpkkmufklmkmqylaknfmfdmoyfpqpqfklmqxnuayupannumdmlyukxmqlnkxdoypkudmoduxqfyqdumauqndqxdnyxolqyqymqallqlqlkpfdyfunaaaknuamdkdqaquknkddypxndkufmlklnpfmqydkxnmyqmmlqpyaulalymqpqlkyoqmduoofyamymqynpaopdoqklnkynmmpkdnkkyupadkyfumxpkpfduamxuoduoaqpdldyuqyxadqxdnxunopodykxmkyuaqodkoudafkunloolkdymokklaxyfkdumooxfmnkxamolfyxmpuydqkdqydpqknxdkfpmudflddqdpnufqlqumakkfpuduxdxauxyyyqxaoxxqpdxyyoldadfflqllnylflfdqmapdlpuqxflpklkxqfxxukyxxqqpxyxuqakpfkyfalnkaooaqnndfquynqkypmmydolmuuplxunyfxyonkndlqpylaoynpxupflyunuxnfxpanoylumpfqnkdnouukxqfyanykplpddxfqmlqondlnnoquxdxfdalxoflfpqdmauakuodddqpldkouuxkxuofnmukoyffnaypknffxfaumqmadqmpyfxlpunxnudmfumaapfxxyofpafakmuqnxkouqfukxfqnuxlfqxxqkmlpkydfdqlyudqaouxxkonaqkqdaqpmkaoooldukqknypxolqkdnnxnxqklpfpflodmmkqmxaakfxyyyfnpmfkxudkymapdpfmlfkquynplookqxdpnoqoklnounqqqfmlpqkdpaxxaxdkxolkqpxofudyalqlyofakapmynpmulxufmkqffuqouqdmdxuddfxumplpaudpoyyaqopluqqydlonfalfqxnyklppxdoloqmoflqlyukkyaqkylpqffypqnupnyxodlmxoandyumdqlllxlqfdxnlypnlufypnyyamqpmlfxkdfxkdnoqkdpyuxnayomkkxyulufmpnaoylkdkylofaolklxkmlfolnflxmlfqundpyqnqdykfankoaalqalfymdqoanpxlaqykkadkauuunlqnfoannolpxyoudupffpfnqqdkupkklumnapfpulkyqnumuaaffmfmnuxmkxflapqnukypxaynyxfmdlpkqmnmkmppoqolmynmqdqldaxxpaqmmxydnoylqonydafulymofomuxqdqpqfxdqxkqnyqdfllfnxauxlfypnddkoxxffdkpqqmkofaupumkykpupuouoqdpoylfmfoumafqpydafpflqpxflulduknqunmnkuyqyxqnyqympndamypqfnmflmuoadymddpxlmuyqpxmamqynpnlakmfyoynfoppaxmmddapaqdnumynmmaokynukffkamadlmqxyulpmkxpyunoxqoafopyqodfoxnnkopnfdxyfnadlpoudunudaoffmdoaoaamdykpakomdmdldoymdypqqxkdoaoqodyduayxdxpxunauadduflmalmqmqkpolamykxnqllakxpdpookydxxlfdmmxkmuoponknffadakanklfluoluymmnldnxufuonfdxnofunfumdufloaknoaqudyaaxolkokafxdpnmkpnknupluooxdaoxxykouxomnxmnaqpfykkpxdunnuxlxnlluoypkynyxnuauaadpxyfnymuqnfalyxxuyqffkopyylmxnxukuaxolnayqualqnkmqnqulaukyxlddkmuflkpllppdkqpukfpfmkodaaxfmxqmquykfmdmdaaafxyodxydxpyffqmooqyflnnnnnqypqdmomoyfukoofalaofmlpqmfpynolyypuqdmqpdoxmmpmnyffxoudkqkqkxyqodkkulufquofdydomknaxfauaqyxdpqfpuqkdxqaxkffkafmuaqfqakdddpqaymadompkdpdfuynkxxmdlynqdopauuynoqaxffxlaxnynnumqquxqxqkaaqyuxppauuyfxofkdxqokdydfpnnqyndxonnodpxqokmmfldoyxupnapyannmnqokquypulnklommdddauomlqdpxnllqlmolqmlukokooldoxfuxkmlfdauyxnouykyoyoudylmlodkaxkmnnllmfdfnoumluyyqodpyopmaduuumxpuldfaxfxadyooaxlnmquuknkyqqykqfmamypdqmuufuaqaqdpnmnaqpmfamddlnnmllpqkypyloukkafolpyquydxlfulunkymdlapffalkulfyyyallpaududqydmpfomaaouoyouudqmpyuamxaxlmqkyynlqylmqummuammdyudofmlmqfoalqnpxqfyqmounxpxyodoaamnnpdppaopmxlkqomkknmxnmyyqomfakxuxduopayyumkyfooadxkyxlqdlkqpoxuamkyqunaxqanfnfpuuqopnnuquqaoqpofoxlnaodoqqlpupayxmqpdquxkoukxmlmyynapmmndqonnoamayxynqdfkmluymdlxpqxuoadduyxyyomuynfoldnaxomppxpkomolpmyaamyafokfmlkduxknaduqfyapydyymxunulxoukmyylmlupfmpnadukdplxmdfqdmdxfxofoqyaxpnoouknayyymdqmamqodpxplnumdoqmmpmqadofdkaalpquxnquunluquyopndpflqqqaykuyyaodxyopfnyuknaqxlmakanpuloopolqloooofdxnomdmmqdulxdqyoodquqlxxmokfqqofmpyuqudfmkmqxflaaofulfakpnuumkpkkqkkquqkmoupuoaalukylapqfnnxllyuxlxoqfuynkquluollopmmqupqpnfpxxlmqnypokoxoaufyoynyduafpnfkkyomdkxxxqnxkdfykqpnulyxaakmayqpalupmknuffqxmkdnlymqkquaynqmuqxkqfdynufkpxooqkxqmaamudpxllydnnfydxokuqnydqayqlkxunlfmldqmymndlfkakyylluuooumnxyuxfydqpumodnxlpppyudlyyqpyuuxnfaknkqamknfofynyoaqyyfmxmuknqmaaxfodaoxqflnlkdukqnyupaqylupdyklxkqamyoqyqmmkllffkfuppuykundnlydlkofkdxdlyolloplmyxaoomfnakxkuxkomanmqxoaqmmynyfldmdqqyaaxpdfdpkanpyaqdpnaupapuxxnfdoaonnuppupnfllfllmudqaaxfxdyklxuqdmxqapnnlndykkqaxxmpqodyfpfmukufdxpkqxopdopuuaudxqfyffdodyxkuuyadmoykoloxpuaflaydkpqquaqkqyoolxkokxdlakkmqdunpyuondnaxuullqydmoxqukpkfqxdqaqfqkmlmanoopodlqaxlkdlpfldaqnnnfymlufumyqxnklyydqkdxxxqplymakmdxoaodndffxdkdnyukqkuqppdxpkdqfoauxkaqaxdxynudupokpyfnqqnxnxqymmnuyoumnlmxkomqpludnyypmlkkopxmydapynfqlaqyqfpknpkkfkdoonynnduolnknydlaoqualxyyfdynoxkkunnxlpnodmdakyupolppmdqfuykqammpyyaqqndokadppkokkfxmmkyypqanulkqkfmqaknyxqnokolnafduapqdkmxloqxmmyxpmxdnnfffanmfpqmfxpxaynflqkqpxqynuxfaoynuyypuqxflxynxdmlunpdkqmynxqydnqumpaaxaqfulqyyflxfqooyqdodnffppqouqudoaqdpumldplmlqoqklpkyddqpodqkoxfqlkyoqdfufkymyaqpmfkxoxfykduoypynpmnfdymmxqdpkpkqkqaqyoxknunyxauxlypommkxfnapapymuodqymlyknmuddxxoxykqxoxfkyfxuflakkqupmaoomaupmaylqkadffkukmpfkonydaaaymkqqmdumqnopaxunxkxnnldodkyfodqyyalldxpqkuodpoomxuaplppxpandnmmxuxyodluyxodykykaaukpnymqmouxuomxfamqdyqoypofqnqxdnxoolkxlapppdkypdmqnpouoppaumklmdnfnpxknapuqymayaupyxaoxapllqamynmadfkakypunaqalulukmldpyamxxkanxonqqmddqyuqdfdupoppmykouquudqpuuyxpyxyfmauuuxdnqnldqloalxkfoxuxqfnykyudxulamxukxokqfdmxpaupuuuyaxmxxladqyaypnmyufpxmyldqnlyfylduudolyddoyuyxouudffpffqqdofkykonqldndnldaoupooaflpqpaxuqofdqqmfdxnkdanfaxlfpxpppupakkqkadyookqafaapmkolpuxqfdkykpkqyaonyxnfqukxyuaqymqfqnxlplkyoaqmfupdxudunpddffaxlyypamfmxmfqxfqaxnqmkkmxypmkpkplnlpfukkuuyqxxyqpxxmfypfulndxnaqyuodynoxlopadlqnomqkfymmafupamyuaplooxylkaapnuklummyydfdkakqfpunakodfmxlpyxluduxxokapfnuoppynuqudnnkllopfauxqmmdfquaodopnqdqpkmnaqmdkkpqxoyfdpnapxlymmqkqqnldouulqyquoaoukdlqpdykoyqlnkxaanunylmlkfpyyyflmaokompykunaukpppoolofuadymyxqfydakdkqakxyuauqmmylouulmuxfkalfqylaonpkxoxfnlplkxuqpkdqqqaydnmadqfnudpplxolukaokmfafkoxounlflxmynyqxnopdnffxomqanxkmxunpapnoynfnkklmfqkplauoydomnaapmxlndxfqmkmfpdqddoufxnlnullqxuxomdoquqylnaypfxlkooqxxylqxmlqpfpkoqdqfdadnpqaxqdydqylquadllypkydyyymlddufdlxlxmyqpnynoyukddxokmlmfmplxxdklxnfkuoafaypqpmokpodmxnxlpxokknxuxplqfyoddyknkkykdknpmykpkfayudmyolnkfuqfxqalflunfqnmffnmxdouqnqxkqkayyokkxqxlnlxxlluuxqaafunmfumkookadqkmpaplqqnlffuoyoonlxopxxlfopmqqnoxapdqfmxppaxqxdamaydfaunkdmqamklmfqxxqyaufnnnnyapyqnumkkpdfnuluqmnuaupoxpdmanlkyxlqxxdydfoqununkmnokqaopaxquaxypulqllyfndnplmddnumuxnoqfamlaauunnnllppnqamkfulpaokykmlpopkydxdyynoyqdqomfalofqukxmdnuadumuxuqkmoxulxpfxyukqakmyakllknmfkdomumonapylxkpllxoonpmapqnnfdxnpkdfqxpqfyaffdqmoymxodfayqkukdpoxldokxduuuoudplnuaqaaloxlxlmnqqxfollfykpyknxpdlloqdfxuxpodfollldyfkdldkaqopananyyoonqxuulnanyukqxkffnnapyyopqapaldoffnxaplpqpxlffaxmkypuyddpmlmnyyuddqkpanyuoayudolafpapaoynfunakdoupolkdukdupmmqlfnndlkkmoonokodydouxmxxnodfypykpoaykfplmmomnlpuyfuoqknqfyaakpokaanlnqanxouykxkyluxfukqfmllolnxoaynxyoldlxonxulaumllnxndxffqyufddypadymkmqlodaaalfaolqfaxfdmqadlmykxuqdmdpyymdfomklaoyquqqyxanonaqdoddukxmpyplqpldmdddfkqapuadnoppnofamfkyluolfqlnyqfouppqylpnuxoafofuonlpkydmodappkxoolqxkmydkuqyuyklxudyqpxlnqdpxudnplnxlummyyyaqapdmlyfxdoyuxllupffpuopqddmkyamnqmopdqluqooylfuaqllqaamyfpanoaqoopqnudplfqddmdqylfmallmykqxkdxkmyunyqpkonkxpdpmxfkqmlnmndmalfdpldnxppldlouxunyumkkpulfflnnmkldpxoaxpxulddqqmynnxknoyqqxlyakxqyuyuayfuamlluqqkodyaqnoppluoklfyypoxadokaloouyxdqxfapddadyodqknqnmdnpykdpouounfxdunumplyodfdnyonqflnfpmmxokyxxduoyufomoxfdylqxxlnddfplpqlffdxnpmnanfqoxfpkkyaxuumualndqpdnfkqfludldxudynmymplnpxkqlnlmnallxqoxaylmypdkflnxulxmkxdpoumopyqopmkoyamanoyxuuomyxudddmpnpdxylnlyyyoxkuuqklfquuqduymkkdmxfyxxqaymmafnymoxyafdxxlldkquommaxmpolnuxkydlklfnlldpyfnkdxqfxffpoldmlqpdpkffdalpolpodnoxqnoanfmxfylpmxdqdplllnxxkpfynakayfollxoaalfxpadkxylqpkdadxyynafmkqoxoluqnnmxafpnumuxkdpdyupoffnammfkpukkypqfnxffkmxlpumkkmlupfldqupaumlqkopxqlxmfoudapnkmnmkmkouyanopfdfxdfxdofqkamxkuualyqlqofykkopfypulxyoolkaknfquulyaldxkdkmnlpkyyuqymffxlxoopxkuumyunkxadakydpkpxmyqquffdlafdulkyxqnlxnkpaouumoluodqdnakpqqkldqxqklpfymkmpdlkumpludnndnoudaxafkayuuqfuuaumumflapqukqpypnodonmlxpffyulldpdmlppmypyxdyfmunoylunkyouuuqxyalmuommyoqxoxmqkllokkpfoyxdqnlldfdpkukxlnuauxknpffqdynlkffaauqqxnmmodkmyaxkyyyukxkxkyplpxyyufnqpxaxxfmyfkqdapqollxmayklakpdfaknpyuqammlxlpfdadupamyyaqfupulofqfndqmdoxkylddoapnqdaxpfnnqlunuknfofoxknydkoykkpodxlxyollupxoqdauumpyqauadmlpoupuufmfpmkoaqmyknmumfoamfpodlkmyxanqdxqmmpqnppmkllfkxnulaxydxkmnuonamalnxlolydoxqylkyyuqxloppudfuqffanyyuklaqxopqmonxlppllpnadxaklaqaupkxdqqddqnuppmfyonafxlmqpyaolaxulnlyupfyqmalfyfnpydqmpykymfnynqxamxmxdfdumxykkkfodunddxuqnkkdnqqyxuoakukddodnyfxdoyqmdloynxplaxkmlflqfdmqafluaaoxpomxpymlfufapuakoumlfdkdpukynufpdfxpaxoflnmypnkfduaapdpqalfnqmyauodydfuxaapnpxfknmnxfyafxoppnxpmmqpmllmamfqqkpplpapkoxuyxoknqndylykkxfdadnoxnypoapudlnfmxyyyufnkamoyfxpkpymkplnofkufmannqpoxoqpflyxfddulakauaxoxfmaokyaflpolymmmndddmpnylqodpdduaddyuoaqouflofmfnymqqyauauonaoukmlmqnmafnlfxyypuaxokaaadodqdaxqoldkalamypkfdfdmaymxmmlydmpnaakkdpqlyofmfuqkuolxukpxmxmqooqkkduqoufdymxpymdaxodnxdumuqaaoooalxmdyqkdmqfakxapnqdpmaykokmmuqoyxoxuoxuyuqlfyxdxmxaoxxpmxfyldyafpxypmudlomkdpaaaxqukdpndupypyxaqlfpnyklkmqodpxfkydxannuqnpxoquaydpoammfklnaooylpdndnulffmldklfnxxqlqxadpkufldydkmfynynofqxknuaqxkfamqmmfpduomduplqqfxyomaynnooufaxamyuoqnxomdxoapfnllqakfndofnyokukqdaypomxnfdaloppfokafkddxuqqdkpodamqlupauoxyfkaxdqqpanlmykdkuymaxxuxonkufymfuuapaffnqqknymaqaodqflxpoqumkdununxaxxpydnnllmkapndkmnlkynlupaafnkxoxmxdlodflkqounlakqnyonmxllfllmlaqfqyqddfolkdlkkndnuxnandunlxxkdlyxymdkpxopfqnklqoxkaulpomqaqlmxqxaqoannmdapupaqdypummokakpxynmnkpldmnqnooqkknpoqmuoxpppooqllapufuuklqlkdmaykxuupauyypxfumxdyqfupudnmaoponukkxmmpuufkpmkdmnpayoduxxnkpqonklufpomxdnunkfkxkxdmolyfofafdqyankxfmklkkauxdlkdnoafumaqlyoldxludkoxpykluuoffffqduomqonkfplxmnlnluunoflflpulqfomupkklknxumynpxyykqlknxdlfpunnalqlyqaoyplmpyyoumdpxffqmnmqxofdyanlaxnupfdmknmapufqukmofdlkyqoqmpopuqamnluplqkuqlxodqakfokmuqnoaapuuylxulkpqunuanqnpdflonaamlxynllxxmmqoapqapnfmpxuoqlddfunmqmlayaqxdnxymnkdndnkqyoonffkomydxdfuayfokaoqodkqqqquqaadyudqmmpyuakoqupaydlyqkqmdldaklkumlfxonpykfdounkooouqadmnqmkqnxplmkqxquxqpukyukqmaqlndplyqapdpoolynxkmydqdnkoyadandalykkuouqdxffqqdfkmfmomflnyxuqofufkkxykmqymxolyqakpudpdduqffqqqapuqpdpflmlmylpoollpdpkqdnnaduqapflquflfffffmfxonlyoyyddklfomxunkkmqyquxkluqpnlkxpxmafmypnknxmpyafquxuundaxoalaxdkyoudmfkudnnmaxmdakxymnqunmnupmmukfqydmxflqmxaudofkqpddanlnmkfpppfnqpymnolmqfqdooqmlxfodqldodyynpqpxfuduykqkmoxmyfkfdndkqumumymopyaaxodmfqynluuxxqkuolxxfyumnplxqaamqkokanqaqxlaaknxxlkpfuxfnqfookdyqqfxfoxkkmppfqaqkmpnuoymyuopxqyfaonufmdfpudalmumfuoyayplkxamdakmymxkaddqqduupyuuqldoylxoxoqpdfuynfoxonmlomyykdqlddlolqlkaqdmodyfyuflkqunafdumquqxlqpodanlmqpypafulpqfmmmodddakmkkofyqqlqanufqkpylxqmkfudfdqkqoxanmpyuqodqomlupldxuqmdflkllanmxqqxufdkykkfkqqnddxlqofflmyokkommdqqanlqmkmaqoffxakuuydlmqufyuodpoqnfkaoukqflmnnuaaonmfukmmoddqdkkoomdnpkoaklpnnlfyqddulodqdyuaqfmudoqponkankqonaflookxdxklonqyylqlufqqxnpdpndxaquaxqkppxlpqmmnlnqdnqmfonffqapqxkppyoqqqnppmxnpfuxxlaypfnalpdlxokxkpoaoxlxakakduyqouqankypdopquopkllnunoaqanmpakdmuyplonnamxnaodxfknffpxkuuudadnqaponpmpnolxydalymqaayakxxplyfqqfyxxfpfudfunpladdqdkfxpdffkxydapoafnpmuxymdqudflkakqfqfmmnfxfalakpkpyuqfyaunflfokkfxdnqqlkuxffapnfmdmxmpyaynnaopllmfmpyqfpyqmkxqkdkolodpnxnmkduyadykmnnqplkdmdqdxxpmykouaqounofypukxfdaflpxxkpunyfoxuymlddfnalafpoxanxypofxlpyyduaulnqndqqdmnynnuukonuyauuaqmxuxfayxxafalxudaokalumnmfuxdnokqmaounnypppkdkmqfoampfyxplnpydknaffdyomoppodqokpfooppxqfxppqxqxayxdlyyqualnouaxqqmplxodxmqmqxaaladfaydofmdaaakoymoyfnkyfmudqlquanmafyuyqqnauodpkadloaqldlouupopyfqdnkxapmnoalxamoxnpfumoalldkdyffaldpfqluduknluooflmloxxfkdpypodnoqndnafupoopmympnakkxkfqmmyanaynmyokkxoduuuqyxknopaxynafyopaomalqxmmduqnuafffyynynyufloaqoakmkxafdnyydyluuddopyyynqauulflyuulaxqnulaylyqmplkdxydfpmaaulnmxypulmaxoxukypxxfuaukyollxfalqulqunxmqnxauaoypkuymudxauqooqkfqonnlokpyunmdmomlxodduukkmqyqkyapmfmyofkqydaolpmlnupqdkxkxxlqulmxookypqqoylayfuufpmlnnypdlklqduuypklfpunxmdaaxxxuxfunuoumfydmfmlnnlnuyfduuunknayxklkullfdaydakffolyaldlkldolkuuuymlqkxdafumyuyqayoodaamdnfukplkuompaakuldofkdkaqmpdfolkqxyonuuaqunlqmmaulxymxkkxnmudakkkqaaudoonxfoayfmllxdypupmdxyqnxxudmdnmkkyydfdqfdlmpyloumymudxxxouomnxxompodfookqapdonqduadxqmqffpfypqnpyfxuuukdfdmofdqydoqmukadnakmkqqlpxqmdqqqoaunkxukkfduuuauxlkkqkdlydnkamdnfxpuppaaquxdolqpdfpqxookqomdfakqoudmnndpyqnudpkdpmolxdoonuxndumudxmunlaoukypfouapypxaxoflklkquadadfuuludydpaaqfqdqouyuddlapayfpkqomdfmlplafuakfykyyyfppxkofymqqllxfuxfuuolfyddounlnoollpmxululufympyolqxmffolknxfymomdxkxllayfkyylafmupdqfokdpmpykynaoupoffmkyxoaaxaalmxdkulapnuuxdyqfkqpomynyfdullampnadupfkxxxndppxqdqyumuyodxmqpnunudqkuynafffmnylkydnluolpyddoouxlodqduxpnlmokkpqanlqqudmlpupkmmmonyqumaynxmypyxxpoqpfnomkdluoupopoxxnkqkpmlunnaunfldxlpuanxfpmpxkfylpaqllxfynoxlookndoqmkmlmmpoqxkpdykmkdadpypyalunaffnfkflaaklomnmuxuknoaaxafmkdypdnndduldfpxanlxoumpadolqkuyonumkaoqmouqmquuaduydaooyfdxqaoapnkumnydloxxkuylopqqlfnqxnypmyduaodoaaaykmxafpaqfnpfnuuxfoxlaklknapfdaqoddxpnymxmonmypqldddqudxoployxlfamokaylxlamumfyfapdmfxdpqxuqluffkfpuopquodlynqaoaaxaannlqxyuufdmpqqknkfolmymadkkxoxaknxuuylnlyoaafqqqmpdafuafkfdmdfknypunoouxoykpmdqkouxmpklmpflmaklpmyoxpplnqyodqpxxqxkofkxlqpuffqlxuxoqmnplaflxkaofqlkyfoyudmuofffyuunoqxumyduoudloxxnkqdanaonkaukumkdfupmomkankpfpmoplflmppfflykdmaxpqmmayklkdoqdufmnkyfqlqayfyylqfknnxklqyxuqqulamqoyykqoaafpqoufolufxdkuaonfkqomqylkxfmppamooyxpdouxfapfudnqynpddomokpnflkoaolaxmfnxuuxadyumnkuffoalokmxmymmkxxoyapplkanalxpxmkuuflaqfdpdlafadlqpduqdqnlqpkfuqlpdykuaddyqnfaxyunlpflmddanfaxdlqqyupylpndmxkyomqfkfnoaaxadmqonkxfpondlfdkndmupufxmqmypymxplfmkkxquuudaakoxlqloomqmpkdyuoypfkuxmnldoapyxpxypqqydaamyuolknnukfnxdnamdaodfnnnnmqnoodkqxonaqlqnfkonyxxkdapnyqkkodkmyquflpxdffxdyllylakoyakxmfqxndxxqfppundmufkdnmfnxfkkoulafdoaapqpdoddpoydxluaqllympaaydddxmuyuooafknldnpnukmkuuylomaynupauqlnqdfqlqdpmnpnfudmqxuofdoludaonmkxklqmmapyuxolaldukdpffodydpdydfdfkyldlofkqdppkaxalnoxqokmkkuuomqfqkqmdoxmqxfopkyyxfnnfdlodkxfmnapxdffnnmolxmodulnaxnumxoxnpknuqaykqlfpoqxodqkxxqpxpyaxyfpoypxdxaqmpmfulmoyaoyokaufpdoupfuuymmolaaofuqndaomayqlnfpdulmkuodypayfqdldxxfnomopfoxxomluqxnyukmklyfmlloplxppmaofqynxxfyffnqydlnoulnmuxxfnpapqoxmapdnqufmxplpqopmdappalyuqdqxayfdyyooopuopoflyolkpdnonokfqqnxdupndnxldflflkfafudddyaqfloqloylloxfomfyayxdluqxkudpynuamqkoklkqupqkynxyykxplanydoqaloxkoyknkdlookaqmdkopqlqnukaxuoyxpfykyfolkaouknlpdalxluxodoomauolpyoqpdqlpomxamdlpxnqfnqnmuxdpapluuflnxfaklmndpqxquqxpmpqyplaqpanpflufxfolkqdnnofpmadanykoauoyyqdluonxyfxyypyxyplapmfldpfmmadoqmaaqfqummpyfqalaymmduaqnuyqxqfoonxoxmoduxdllqmyooouaxqxmdnqlpdqolpumkpflofkfmoufylxnpxnmqufmnullnxaumnkppnopaypkoadqmnkoadlokkqpuoaamnoddlpnpqpmffpanxlokqfafuafdonlapnxmnmaddanokfnkyfappnxkymyfnaddxqkyxxmyffxokpoyluxpukkxnkpnmpoddfdlnmypddkllmayyaqfuxplqopklqapnkoofakfnpfumfdlkkkxypxnfqmnxfdmunfnkoxannqpxaknpadxadlnnayduddymaaxnomdnmlmxuxyupxnodqxylqmyxlypyullappqdmyfkffalfmdmyukkfokfdaffmkkkdqpfqpyfaklnaldxaqkpfaplfpkpykmxqlmnnkdquyxmkkkdxmauquauodyfaymyllmuqyxfpykqdluxoaqfqyqxnlmmmapaamyyamdnuylupqpnkopyqkadpmykuxduqdxxmffyyuuupufxaqqxkqkmfpoomqfdlaopdqdmluyaymaxqdlunfdxlypkpkadaaaddyxofkaylpuxukkdomquaqlyxpumddqqfllnaaxomoumdndpnfmyquldfpyxlukfkqaxmaffknunapolluddnkffodxnmumxnaldlxulypukoploollaloklofxxnmmxfafqmdyaudlyuudqkmqnnlaloyduxdullqdmuxlfknnafqxaqnlxuuoppxqumudlnfdmyonoxdmlyyafdpuoypxqopufxmluqnnmmaunypmqquffpofyuaxukquofykfuxofxxlpdkxdomdkqfdfxlfkdpoumpfmmfqoknuoqonyynmyqnqkqalfpkkudmoaxkfyafnmmqqoqmnfdpqaxddyaloxqmuydqfkqlpxmaqupxdyuandyxfxolqddpxamxaoyfdxokmnaxffapfqyoxayyqypoukkmaqfduffddmdapmldfqdxdlxydkkdyxoxaauoxlnoylxumfmapoamylqkxxmxopdxnnlmaqkfffmmlododpllpfafnnmaxulflkpfnfdqkykdqpxupnlmxknxnmnoklufokpqpoqxxxpdqxpdmfnlnoflqlplplnkqpkmplfnnaumpxqkxflykmpmdoqudfukmfplqdqkqdmllaunapxakqpxknyylxlnyffqdaofqpyxnxyfofxxopfpqyxxmyffffouyfnqqofmfxmaukxloundlqkakxomnmfnyyxoanqdlukydnyppuqumkfuxoxqomoouxpnmmxlmqquupuuludppklxxxklpdymlkmqyxlllpumooxaaamdxaouqxllokafqxoddxodpmodffloqdyxmxfunulqylqomkoflnkadmqqmqluxmnffdknoldqyakymaofkpnkdqqnmounkokyqlpppxqukufmpalaoufdmpuynmuuxuknuymuakxkxkflyyaukodpnaayxayakoyoldmnnduoqnankxmanqfkuxdkakpydoxopoyaxolmpyoolfdqplpppxfxmxyunkfyxdkodpmkdlpmamoxnuakdqoqfdpmymnxnommnfpdpolxppxdxlupuuqxolkuoflfyfnfldxxlanxapmqmndaxkmumoymukuaoxulalaopqnomomdfufxxffqnuydquoylmlxaooykffllfoxdonopqmlfxldonkyodxdykndqlyoufoauoxaxxpylpaluodqdkopoxlpnnoypkyppmkpxpxmmkypdafqnyadxyoyldpfqnfkfualklyoqxllquydqdynfmydlxmkdooupfdpalnudpmulnoloxoapxuumymnfddqalnukxfpfdfpynpuyamommdluoaonkppoqmlnqoukddkomfqupayqdkfoqopqyxqdydlpqpynoypxnyukdmdqaupuyxkkxmnxuqnnknqxqfundxfpnpxkfkayflpxlpxpmolpxkfokpummyukanufqqlqoouynukpmyqmffqodmoaqakyfudalqyodumaumqoufdlkqmuxlmooummmmmdynnkxmlndladmdpxqlflyaqdqyfuoodfuuplxmfnkyulldaxynokuxlqloxfuyaupoufdpaydllmxyoayupkfxayuyudmnokpkkaydmpkxfxkkdqmukypqduyoqqfnmnfnquqluqoyxynqmopmodpoondqdxfmynupnykdnlamyaqfdukflkxoaokynnxqkqppkdndpadkfpkfappplqmplakadqqnaxkluyamfquxaxmmaaqyxnpfqadqpxamfuuuudouyddkkkloxanapnfldonukfyqdulypdlnkqadyqxddkdyonppkxnnyakxoofqkmmdfmdxfxopuqmfxxukoknyknxqmxxamoqodyxkyofmppaouoaqkaunuaqyqluxqmyoonakokkkpypxxqokuokqmklkxnmqynmuoamdaqouldqynnkmfldxyqaopluqyouknpqxafqlpappdynyqpqklyuqopplfulukymaopllpfqomqoufklnupnuamofflpxxllklypmmauqafdqnlmfoldoufmfoadloonkdyoommnqomyplomaonkmyypxfymofunxlaqdadkkpukddnlkdyupyfakfdmyaqxooaqaupqlooakfonqqfkfxaulluakomlmyyxqnqumnloonxkqlaloxkdqdlakfuxqnklyfanldamumkppakopxyxkmyakkopanddyqamolndmluddxfllpfyylaplkoopmpynkddxndmkxqodfldxlnmqflnqofqyonpplfmqlaoqmkkkfpnkmxappuxnkofdlalxddlmaayyyaqqxyfkllkpkppallddmnaakukxkfyaqadnkqlfaolfkpaplqmkklyadfknxmqfqullxmuuqaannyaxunkupqqdynmlldmpooaaxkfoyfulludkddflufapymyfadkdmxppdplmplnxlxafkaylxylnaxmxfmoquqlfuxfomdlnaylmfaqxnyqupfynymoaxalpknofxpnmydmxapkkplamlnodlqnqlnkudkmnpuaomfxkxpmkfkdmkyxdfkqmnpplqamyqoynyqmxxxkommlolnnkafpypxamdydpopkymuofxfnnooyfapomannmnxpqdamuayakdfkyxlmfqxyuyyoyqdapfldmoyyufxknfnkloyafmmalluaxxodkmfflaunoxpanaomomqfyyflqqkoynfxxxqydnpadyammpdpdmnamfoaomlonkpqqkxldylpkuoaymmofknffxffxlyadkpfkdomndlkfamxuxyxmyxuyqnxndnnlmyypdyqyyylnaxlkfmdxakydokpxxmapdmpudupmaxmpylkxofopaokxkllakpynuklqadddqmmuafkyylfumuouxluqymlydpyfyfdklmdylddxndnmfyypqlaofxnumpaokufumoaadokqxaxfaxolfpomuoxdqmkfmlmmplmfmylyknnumompxuuxlpmlxdnoylfdkdnonmdmufnunkllaayunomauaqqfykmknokummmpoypyfypnyxokpoaopdyyyknapqkqxaymfuxmpxqalaxlqoypkkpdnmkxxqlnmopyyuufykkfkxfumuuuxfqxxfdfylxpdmkkoqxuaqqkompfxaoxxfxqympkfmdddqkukqfukmyfymnmpyafloumqflynduufylkonnqmxnqffkoqkppoffyqaomopnofafmaoyfnqayxadmmyyolopanmddxkmqqmummuquafypqqoxmqfaklqlplumqpqmnknomfqfxpydnyxqofylppnaaaxnokulppnoonqqpnmoknkqxdmxyalukxxqfpppfxpfqynaqxyndnuddnnxmppnopomaypuqppounoxxumaakapxdkpfudmkkklpqkflllpanmyxydfnlykpklnululuoudfkdpxpollnyfokpxqmmomkoypunyuoofxdkokuyqpundmmnxqumpyoxknapoakqqudymlqldkdfoqmufddqnylqqkapqxyddkqlpnpdaaqqlupnmnolfyxmudlkuxofmapokxamakoydokmqxkooxmfxxpmdyudydxodqaxfakfqlpaqumkmdxfoyyuqaoxdqlonynukumdnaauaolqmxnypknoymyuxopmnoqnkpunlmfuapfolnxnuoffouxluloqnmyfnaompynulpqofnlyopokluuyddpxnlnqokndnppnyymfmaqqlkafyaxxduqykkoauuxaydkfkyxuydolkafodfanaykddunmdaqqaadoylpkkffyypnkmnxdmmxmqoyomxkfpofnnmnduoufpqqmakdyndydlqufmflxopydxokuyyfkoyouokmmxaakfqqduapnoqumommxoxqaffqppnxnafpdaukmunffnkkxkllpapaunquxflknnlxopdykkmupapdukaqfpkqufffmoddkxaqummpunnnunoqaonuxpxupylfflnqdqoqyaqpodpoqxxoqpdnkkykmxmuoxpfmdulqxldffqomkllpufduduqfmoyypnaqlmdkklulyqanfyupydyfuamamuyomyuddmyxnouomndpyaxnkxxknakquflofnynmmlfaqdnlqppodofqmknxpodadmmkppmqkpqdfnnpddqlnxulumqyylodududynxkomaunuyfqoduykooyqkkmlyykqqdmyfplfoluxlkuokqpxfylflklyfkaqnnfdfyxuaqlodlkynkqyyxlndlopunmxqkayaqdualxyulxkypluyuukmpylqnqykodluqqudulpdyqalppmapuuxuqxmluoyqpnlaxpkukxxlnapxfannxuqpxdomqymmakklxoaxlqmmxyufdopukxdokdaaafnumpdllxkydpmmlxpkpmmxlpnfadaaqqfkpkulafmkkkymxlpnooaodqfalypokpoyynxuqnmmlolylkdnfyafqmoppyounkxxplxfpkfaffddfoduyppunlfykpnlfmlukflxuylflpumpylouqkdqxpoffnyqnylynduxlakflpqyfpdylnlqpdxppfyoyqlflyamqfopxafkdqmymumuoyfooaxddoxnanxkyqmomomalxnqqnuqfffpumfmqpqqfpffkokndnafmofylopkaxpplakluxoafaxqkmmypppaflyqkyykfpnyaunkuqfpoadqfpqkdaoknddpqfduqpuodkmokluxqkyfnkmxyxdaapuoafpxxflnlypuuaufmompnyolqdpfxpmfxpaodlnqdldqplndykmlomfopdfnkaokmyomyoaxyluuylnoofdudfoopkuqxxmlympuluyqoolfydaqdnaqkqyamfmadndkxpnfldyyfpmayplmnnxaylkqfdpfmnyupxynmuoxayoflqmuxmkkmqxamluxxkaqyfuyduuxfoxapdyquqdulodoomqqmffnqdkoxfqdakplmduklpmlmfxndxnqamumakmfmfnpokmqyxxldukmlluomduxdflluqppyounaxypnkannoplxdpxxxdflqdnfdqxuonnpfnuayyqyfmxquyodlnfamypnuouyqfqpqyqaufmxlnadxlnpuonmoloklmyuunnfunuuyfqamayqaoqdudfnxldndmyyldunuaxkdqmamkufnpyalklknxanqdfkmqlqlyonopypkllflupyxqduxxyfklndxkkdnpopqmqqqyqqalyompkqkfnpyppfnydpdxufflupfuyklakqpoyqufludyqffpupffpkmuoxapyoqomxpmdpxkdyxqkonaxpulfpflkdkynanmkxqkxodokuluuxxqnnkupafxaykpukddyudqnonxumdymumafkyoaaxndnfnmnxkqaxafoufndpqyxoakyqklfuqmyafanlfokqpfqalqxammfkokpmyumofqapfmkmmnapyqoonffdqfynxfmxfolkpuxfxqkdmnqlxnqaynqyxoqlmmkpxnxofxoqnpappuxxfmyyldxdqpodpoaqumapyxdfxomynmnfypamqnuqaqdpqnaydyoakmumnppoxdoklpodaupukomknadxlkpmnnkdkappdomaaxddmonanxpfnopknnmouyqfopyndmaqayunqmlflkaqaypllyyaaamduxynnnflmmupnmllndnddomdlkmynkmkoondonounfnakkxlnnxypdalalnanqnfloufqmmxxldaylnxaqmnyqxnxlyomnodldxmmloymauuoaxyanfuuofuylllkaylunmxxqlannxmldxfyakfoqlqxmaqnnpooomklondldmkfklxlpfammxldyqadpkpxqmqumfxlqyuxkxmqakpdumkkonnxylqxnuknmxlduoylxlokyapamallauqnuyfpaqqylkduddoxxkkmkuplkuppammkumfxauldfqmppmqounmqomfdayflnallxlupdymuynxalnxldoodmkfoymydyfmpkayuyqkqkayquxlpmkpklmypqkoonfoxladuqadkamfknkfllqkqamuyfulumyloyqnouyqyxukxkmmpqkffmdxxkkqukdduulqyflanyuayqokuxfnmqlqlmdpqynaxqnduuuomypfyxldqduqyknyqnfnnyoklayukxopxyldqupyxfafmkkqypmfaqouxqxaqldqayxxlaulydpxxfunkffauqykxmupqannudnpdynpapykdoollfmdofxmydupaaoqpoldxuxumfpfddaqxuydqfynndaqlxfadqunufmaxnmqmumkxalqloqndyfdxqyoqnklqxdlpkqlyqylfxpnfyqkylnplakmdflkyllqdkkyqodyufqkaklffqdkqonufxuluuulkyuokafaoouqmqfaukxxfklmoapmkkpmnxlyfxaoyaomklnnylfnnaxkxlpkdkfkqxqqdxuayfxykqalqxydaalpalkdlauyxoxxaannllnlmmfaynldlyaqodmnqpnxnnqnqyaopnalnpfmdndxpaappffunfffldxkndxkxpmydlldxqydplmlqaymalmxpnuplmpkmdfkpqpdnkyfanqallpaanlapufyynxqnmofyndpfmomklaokqupamyudomnpudmpuaulxynumaufafqqqdapplpfnafxaolloymolfopyamqxqyxpxaylapmunmfudyludnplpmpkpkpmpqxplxkpqyadkdaxofpppukylludfqpyxfqqlkfpyynuqnukpmfludupqpaaundqkxqxuanyuokkyndfuloqknkonoonudxkmqdapufqqndukukfoflpkmmuypnuuxqnkyyakaymayymdnapduoqnpnmoalomnlplaymxxdxyxlykunxaqmnudnlmnqmynuouffxakmxlymnyqfdmdapppplannxfmmakfnamldqqplxpuxmndpmnfakxudxldnnnymdfpdkqolmankpyoypnfkfffoamallooykfudmndlqnfqyannxpdnxqxxluanaufyqqufpnflyyyyxlkuokndpxmkmlmdpaqxxlyduyfomlfdqmakmnxnfaopaomnofqlnluqpkaamolkdnxuodnpunmxdoqppnpunopqamaqyuadaqlflamoxoaykxupydyopxmolyoyundfpmxdpqmdpplmoqumkfolpoofpxudpxqqymalfykxakplfufqmaylfyulqkauyomuxxpxmnkoyqplyfyokfadpqpaqqxanxoxdnaqpxolqukmokyumpodpuakkqqknafaqakuyfqxmmyakfydqfpffuqulqfoddlolxplxoulqqxqnynnyaknnmnlduyxonnxfofldalqlmmdlkdamaonllmykldfapnnnaymnypladddllxquqdkdaunyuqamuoyoaamkaapomonnfuafnnlomafmofodxnlmanpdumdlxfqpofudplofodloknnynonnnnyafqoulklqkafqqfudfnaqlfalnoafkoxoomlkoauaaonddylnxxxqpfdllqqmmfamquaumkdlxypymnmyampxukouapmaqxqamlnkomunyqaoamduxffaydlpuomoalfyppnauyxauyqyfkxyqnxualyfkdomlxddpqadyuyyqyknxofqmdnkdyxouxomomupkffyopyyuaknqdqdafmfakqmuqommaylqdunpalqdoflxyuquyflpdkkdlnfpllxfppnnnuapofouquyfpqqnyffnpuyloaonlfqdqkqlfoqondpynnqoudupfadydnmakpfulaoklmaamuuaunkdfopdpmfokoydomauxoqlmaoqkmuadqyoqlufnnqkpofnumkononnkdxpmfuaqyonxulfpqnlplolqanookyupodpqaxnofxdqpqyolxqkxodyxkydnmdfpqnpdoqldldqqfdoynlulnayxqopmxkmamaodlokppdlxyoufaxuxyylymfqknnknykkldfoffqpoxnyodqnddlxxuulylyxfmaxklmxmpomqyfoukfyxnmlqqmupmkapnqaddkpqfakpxxlmkdnodadfyyxoqxnnnfkuqpqnpxayxndkfpmflyaukxuoxymkfdxdyffkqdplxoykaaxuuumlpanaluppdanakymyadpdfadxklyaqodpfpnkukpylqqmnqypqfdddkuoflxdkolmynqldpqakxkukoxulmafndpyxqqmnoykkonpldqkomdmpmuafkymnnppuyoxfldqkumydydxpkmdyqaufdfydmynkaumoamkulyaayuxkulanxafndkxdnoapnuoxpnapaykamyfyylkkfuxyllnfqodxdqxkqnpfylxafmoaopxxanmxkoddaopdlounkqfqlulndkdfpaqofqmmxonyuxkudnxylmyaklxknqpyonpypufqmfdknfaqlunlonkxunaayalodkufflfpfnaluokomkupuauyapdadxququaolqpfnulymnfoffnxkuqfomyfopumlpmddknoqluqxyyqlmklfmmpoquaqydxfoaddopnomaxxkfmnlaplnlmxqnpppudumauknluduuuxdpuonxaoanaaaplmfauoqdnxadxdpmfpdynoxofdalyyuoxxaxadyknaopmqpomlqxxxfllykpxoylalyumxfdonlxkulqoukdkofkqmoumnpnmxdyxoqxuaoykmolkynllydmkluymaylpkfyxmapxfpuyloqknnnqulyalookudxlqlaupqxddukaqmydylnfpkyquqkplpmqqykpdqxpoofkauofmumpuaooqafkpnudkmxmaxalfuuopmlunkufpqxunklkydxamxmkymqallqyqnlduakqfuumldfqfnafdfxkdlxnypofpyukpplndppunyndolkooyqlyqoyqllfmqykddyamkdqmdaflpyllxdakudxpfpmnyxpnaoadoxpmknaynxkkymaxxxnnmdynnmfamqykloqlydnnfafoqmukppfpxxmuxlfymaakmfuyuuyqkxpxopmpdmnqaokufuuxllxlofmnqxoaalmnkndkpfpdodknqofaodnnakupyqudkudxfqpnpauanqlfofydonqlkqmqdxlfqyxquadadkdfyqqqdddfuykpdlmmdlnlulqfpafnkyfdxuanddafoaafpalydqymdoapxpapmyafflkmlpaaopaklxpffnxlpulqpqqlonxaopfqmopxnyonaopppaoonaouqyalmanuoqpynxkxulkyyumaypxuxfapyfoyxfyaxkopqflladfxmufmappooppxpdnnfkkdkndqfxollqllpfpqdomddaddyouumlqqypkkmldxxkpdfomffqdfadudkpnkuxupnukpqmkofppumxuladqqmpdakoyfonkmnxompualpquxkdxxdfpkkukalkpqnalmqoqdlpoxladnoolmuddxfakfpolqxlumxkmkxxoxofaafkaddfkupxqopapmfpkykoxooflqdamomqxnpmyndomnpayomddanofpaddndamlommyaqpmykqulkaamyufaaaqqnmyldaluulmkdmkppmmfmaaxqmpfpnnlmoyfkllupponxqxfunqydkyuflklxnflkqnymoaouqkxakkpafmkfyalllpfxqppykkfuopxxfmauxmdfnkxyxnolyxyydydlqdoodloamopoudmuoxkynaxponqfkknxodnxpuluxoloqqnxonmdkulluqmnqpquaapfmlkanfmklapokudpflouomyknauxponfloqamfppakdyfuaanpaxdlponudlfkfnypqoyfoaqfpnkkmdklppmunyuqxfnkfyaofoqfxoounymumpqnpouomdunfxuloknmuamynoplxyqnnlquauuolfuofkfapnmnkanlqluduqkxkfyxayndnnofnmooyqxuokpquqnoffqqonaoqxqlqlldpmxyaluxnlddpdfmonqufdpkqykdxfffuumqxmdlapmaxymklfaplykpdluyffufpqfduyxponkodonnaxaommqmolyqpoxanqoqqufldkfoydoplmaoqddqpxaoymldqfmaddfkykmkxuakuoydxloaxmyuxoqaqpudpomllxoqlaqafafxnqkunxmuakpqxmupofuqxxolnqynpplaolodxaoyppflnokokoupnnafmaxduklokklaanypqupanklknnkymfoxyykafannyluupkkfmpkaxpylqmdoapfyxxkqkumoxoxoulqonpnpxfuxlmonklxoyyfmnfdmxlkloolknondmuuqmfododlaoqmlapfdaulaypdmpdmpaupqduxnomklymqokuafaafxfqfkkxkyqplldnaukofaanulfnlddluknkapuqdyqxqqlolamdnldnlmaodoqnkqfulnkuldpynnnnummypqfkuyqpdldxmnnffdlnqoqqouupqyqaxqoykauafoffufopxapfylxpxkxxyllqdxmonyokdkuyulakqdpkmaaofaoaaapluoukpymkqkdmmkdnqlooodnlxxoumyqoqfunlqpoqdfkxuylxpmodkdkdalodfupayyuplypmuqupkldmummuqqopxoloxdkmuyykoopnodxnokykmoodaqoqlqdqxyduxqukqykqfmaaynnduqankqmaqkqpdfaknlnkalfodpakloyunupldpufmnlpapyqdxxfxpfynxffdnnanuyamymuxkayklyqqlqaufdaqlaoykqdaaaoanppkokuqylqdquaoufnopqqyyqaxxpumoodxppnafnafoakpqoyanllmfklnqnfauxfxkqmumqpxxqkmomnpkuolyfqdynamuflkpflxkaxxqqfxxflufuldfuaknoyaqlyxldnldoyflqalnlyllnnkyymlolqopfmqlauaxdyafppuqnlxyoaqquaqylqouolkqayuuayplfnkxxafqoalmofuxfdmlfmununqodkpkqalqfxnpdpalxaqoqnnfqqffflokkllnlumyndmlqllffyqpfomfkfquodoquypnadndxkafmxquxuoklmxdonpqpqkmpuupkqapdnmyxyakufdupomauypqaudfafdkmkqouxfflklkoykmuaulafpnullxpoxdkpuadymdllnnmlffypxfdqulxumumaunxmuqpalqfxmoafmplqopfpdmnkdqqaffnuaakmyuxpnulomnpkyoxaolulxypuonuupdylynmpuoonaddqxkddmumlmkfpayxxuppaqknpdydkaxlqfnaafdqanmapmyyfouqonuqolmffpkmxqnkfoolaxqfoxfoxknnynxldffnkyndfkymfoqxynmuplxkkfudyqxdymxuumponxumfnddqouddpolkayunumkkfxxakolduyafyfqklulxqduloxkppdoaxxqunpydkoqxokfxudlmnukaymnmfymxdouallqpoudxmdokkyuoudmfxlpuodpkxdodddkffpfmnafoyqaooxmqoxylpaqxlqkalqxmllnoqaamuuyumxxlokyqkdaunyuxdmmyapqkmpokmuylpxqayluxuxnmouumqnmdponoxflqpxuofolxoqdkmpunqynpypxlaxolkmknpnyfaloamufmdkmdludyfuaoqdmkuoaynmnpaqyyuxufqoopmfmuayaxaqflykxlanapkqfnyxpllnuuufpmlyxdlkyqnfdkkmkomfnxqumynfoommmxofulukayuqaxafpdxukyfauluxpummoxfaykmqnpqafymulqdpxnffkxqaaaafklxxquxydyfqnumoymnouqauupmpqmkxukdfmmaakaaqoloaoulapxfnkdumlmnmudaxqpafxpqayldladlmfmmnfakqpfnmmokmlnnkkpakffalyamldlqyyamyllpnaxofmfkqlkluadlomllmaopaumdpuyoqqmymkqpolofonlymlpquykmonqlkumaqpfkpfnqxanxmladuqafulyamxokmqofllnfxuyukonkpdkdfaqlxlmlapqanmklufnlkopfxdokkamyfnppxlxpppkdqqoyouonmlkkkduudxfqdofuxxmlpkqpxolayqkqnklxxqomffppdluyouydupumynlmxyfdlqfmapkxnkyflakudpoyplmuqkyfdlqpayplpkfydnppynufyakkmalaklfyxxxydolmaynqmqxdnpualapduakypkdaomnxmflmaalnydapkaofunqakluoldoxmuyqyddduxfalxqmkxkmmfpxquldkkmuyxnapuyoynmdplkpkldfdnkqaomnkuqnnmfomynduyymlkqfxkfoafpnoxqkmoplfmpnlknffppflaoxuloxppyyflaknpxolqmllxmmmafmlxxkpuxlaofxuduqfndlaaumklkoyqopxunqofluuplfapuoxmmqylldnoqnoxfayfqkxmkfxqonmmddxylupyflklnylxymnxlpxamymxmlnnkkpxoknyyklypqpdnpyapqafdofxlyflfypmmnykufxppynxdnfpopxmkqdlumqpooqanoxnynpaaoqqomadoammqykdxqopmakmkukpydpyfmpmkuklklfqyopdfqdlqndafadaxdofmxaoqflfdyxfffyqxpafdqopxmakaxoxxxunodymukuuqxupqykkpyqkupkkpxnflmyakuyqomnkqapkfaykpflnykdklpumpnpqoqnkkddfddadqlylayymxkfmndkpyumpnflmnxfmadoflaxxkuuunfnnfyynxmfxfdxdxoanqapommnxfklpoxukopanlfdkpxyadxfynfuyoadllmknddpyakxudluffkqolmyqxonlnolunnolukmqnpuauylokqfaynmolkpnxkumonmuykpmudynlylfdlpouqpmaddqlydffaokaqqnany"))
	// checkMagazine([]string{"ive", "got", "a", "lovely", "bunch", "of", "coconuts"}, []string{"ive", "got", "some", "coconuts"}) // "sredoC dna dlroW olleH"
	// fmt.Println(arrayManipulation(53, [][]int32{{1, 2, 100}, {2, 5, 100}, {3, 4, 100}})) // "sredoC dna dlroW olleH"
	// fmt.Println(easy.LetterCapitalize("hello world and coders")) // "sredoC dna dlroW olleH"
	// fmt.Println(easy.FirstReverse("Hello World and Coders")) // "sredoC dna dlroW olleH"
	// fmt.Println(easy.FirstFactorial(8)) // true
	// fmt.Println(easy.ExOh("oooxxoooxxxx")) // true
	// fmt.Println(easy.DivisionStringified(70000000, 1)) // 70,000,000
	// fmt.Println(easy.DashInsert("1234567893")) // 60
	// fmt.Println(easy.CountingMinutesI("9:00am-09:00am")) // 60
	// fmt.Println(recursiveNum(4))
	// fmt.Println(validBracket("(()"))
	// fmt.Println(arithGeo([]int{3, 4, 5, 6}))
	// fmt.Println(abCheck("lane borrowed"))
	// fmt.Println(arrayMinJumps([]int{1, 3, 6, 8, 2, 7, 1, 2, 1, 2, 6, 1, 2, 1, 2}))
	// fmt.Println(arrayMinJumps([]int{1, 5, 4, 6, 9, 3, 0, 0, 1, 3}))
	// minimumBribes([]int32{5, 1, 2, 3, 7, 8, 6, 4})
	// minimumBribes([]int32{1, 2, 5, 3, 7, 8, 6, 4})
	// fmt.Println(rotLeft([]int32{41, 73, 89, 7, 10, 1, 59, 58, 84, 77, 77, 97, 58, 1, 86, 58, 26, 10, 86, 51}, 1))
	// do not modify below here, readline is our function
	// that properly reads in the input for you
	// fmt.Println(FindIntersection([]string{"5, 6, 9, 11, 12, 16", "4, 6, 7, 11, 16"}))
	// fmt.Println(hourglassSum([][]int32{
	// 	{-9, -9, -9, 1, 1, 1},
	// 	{0, -9, 0, 4, 3, 2},
	// 	{-9, -9, -9, 1, 2, 3},
	// 	{0, 0, 8, 6, 6, 0},
	// 	{0, 0, 0, -2, 0, 0},
	// 	{0, 0, 1, 2, 4, 0},
	// }))

}

// func hourglassSum(arr [][]int32) int32 {
// 	// Write your code here
// 	hourGlass := []int32{}

// 	for i := 0; i < 4; i++ {
// 		for x := 0; x < 4; x++ {
// 			upRow := arr[0+i][x] + arr[0+i][x+1] + arr[0+i][x+2]
// 			middleRow := arr[1+i][x+1]
// 			downRow := arr[2+i][x] + arr[2+i][x+1] + arr[2+i][x+2]

// 			hourGlass = append(hourGlass, upRow+middleRow+downRow)
// 		}
// 	}

// 	sort.Slice(hourGlass, func(i, j int) bool {
// 		return hourGlass[i] > hourGlass[j]
// 	})

// 	return hourGlass[0]
// }

// func rotLeft(a []int32, d int32) []int32 {
// 	var i int32 = 0

// 	for ; i < d; i++ {
// 		temp := a[0]
// 		var temp2 = 0
// 		for temp1 := 0; temp1 < len(a)-1; temp1++ {
// 			temp2++
// 			a[temp1] = a[temp2]
// 		}
// 		a[len(a)-1] = temp
// 	}

// 	return a
// }

// func minimumBribes(q []int32) {
// 	run := false
// 	isChaos := false
// 	totalPositionMove := 0
// 	for !run {
// 		run = true
// 		for i := 0; i < len(q); i++ {
// 			beforePostion := i + 1
// 			if beforePostion == len(q) {
// 				beforePostion = beforePostion - 1
// 			}

// 			// if more than before position
// 			if q[i] > q[beforePostion] {
// 				// if real position less now position more 2 step chaos
// 				if (q[i]-1)-int32(i) > 2 {
// 					isChaos = true
// 					break
// 				}

// 				// change sort
// 				q[beforePostion], q[i] = q[i], q[beforePostion]
// 				totalPositionMove++
// 				run = false
// 			}
// 		}
// 	}

// 	if isChaos {
// 		fmt.Println("Too chaotic")
// 	} else {
// 		fmt.Println(totalPositionMove)
// 	}
// }

// func FindIntersection(strArr []string) string {
// 	var newString string

// 	firstArray := strings.Split(strArr[0], ", ")
// 	secondArray := strings.Split(strArr[1], ", ")
// 	for _, f := range firstArray {
// 		for _, s := range secondArray {
// 			if f == s {
// 				comma := ","
// 				if newString == "" {
// 					comma = ""
// 				}
// 				newString += comma + f
// 			}
// 		}
// 	}

// 	if newString == "" {
// 		return "false"
// 	}

// 	// code goes here
// 	return newString

// }

// func minimumSwaps(arr []int32) (result int32) {
// 	run := false
// 	for !run {
// 		run = true
// 		for i := int32(0); i < int32(len(arr)); i++ {
// 			nextPos := i + 1
// 			if nextPos == int32(len(arr)) {
// 				nextPos = nextPos - 1
// 			}

// 			log.Println("==========", arr[i]-1, arr[i]-1)
// 			if arr[i]-1 == arr[i]-1 {
// 				arr[i], arr[nextPos] = arr[nextPos], arr[i]
// 				result++

// 				run = false
// 			} else {
// 				if arr[i] > nextPos {
// 					for x := nextPos + 1; x < int32(len(arr)); x++ {
// 						if i == arr[x]-1 {
// 							arr[i], arr[x] = arr[x], arr[i]
// 							result++

// 							run = false
// 						}
// 					}
// 				}
// 			}

// 			// else {
// 			// 	if arr[i]-1 > i {
// 			// 		for x := i + 1; x < int32(len(arr)); x++ {
// 			// 			if i == arr[x-1] {
// 			// 				arr[i], arr[x-1] = arr[x-1], arr[i]
// 			// 				result++

// 			// 				run = false
// 			// 			}
// 			// 		}
// 			// 	}
// 			// }
// 		}
// 	}

// 	log.Println("==========", result)
// 	return result
// }

// func minimumSwaps(arr []int32) int32 {
// 	swaps := int32(0)
// 	i := 0
// 	for i < len(arr) {
// 		if arr[i] != int32(i+1) {
// 			arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]
// 			swaps++
// 		} else {
// 			i++
// 		}
// 	}

// 	return swaps
// }

// // * Using the JavaScript language, have the function arrayMinJumps(arr) take the
// // * array of integers stored in arr, where each integer represents the maximum
// // * number of steps that can be made from that position, and determine the least
// // * amount of jumps that can be made to reach the end of the array. For example:
// // * if arr is [1, 5, 4, 6, 9, 3, 0, 0, 1, 3] then your program should output the
// // * number 3 because you can reach the end of the array from the beginning via
// // * the following steps: 1 -> 5 -> 9 -> END or 1 -> 5 -> 6 -> END. Both of these
// // * combinations produce a series of 3 steps. And as you can see, you don't
// // * always have to take the maximum number of jumps at a specific position, you
// // * can take less jumps even though the number is higher.

// func arrayMinJumps(arr []int) int {
// 	// Kasus khusus: jika panjang array kurang dari atau sama dengan 1, tidak perlu lompatan.
// 	if len(arr) <= 1 {
// 		return 0
// 	}

// 	// Inisialisasi jumlah lompatan, posisi maksimum saat ini, dan posisi maksimum berikutnya.
// 	jumps, currentMax, nextMax := 1, arr[0], arr[0]

// 	// Iterasi melalui array
// 	for i := 1; i < len(arr); i++ {
// 		// Jika sudah mencapai akhir array, kembalikan jumlah lompatan.
// 		if i == len(arr)-1 {
// 			return jumps
// 		}

// 		// Perbarui posisi maksimum berikutnya.
// 		log.Println("============", nextMax, i+arr[i])
// 		if nextMax < i+arr[i] {
// 			nextMax = i + arr[i]
// 		}

// 		// Jika sudah mencapai posisi maksimum saat ini, lakukan lompatan dan perbarui posisi maksimum.
// 		log.Println("============", i, currentMax)
// 		if i == currentMax {
// 			jumps++
// 			currentMax = nextMax
// 		}
// 	}

// 	// Tidak mungkin mencapai titik ini karena kita sudah kembali dari akhir array.
// 	return 0
// }

// // Have the function abCheck(str) take the str parameter being passed and return
// // the string true if the characters a and b are separated by exactly 3 places
// // anywhere in the string at least once (ie. "lane borrowed" would result in
// // true because there is exactly three characters between a and b). Otherwise
// // return the string false.

// func abCheck(str string) string {
// 	position := []int{}
// 	for i, val := range str {
// 		if string(val) == "a" || string(val) == "b" {
// 			position = append(position, i)
// 		}
// 	}

// 	if len(position) > 1 {
// 		if string(str[position[1]]) != string(str[position[0]]) {
// 			placedTotal := position[1] - position[0]
// 			if placedTotal == 4 {
// 				return "true"
// 			}
// 		}
// 	}

// 	return "false"
// }

// // Have the function arithGeo(arr) take the array of numbers stored in arr and
// // return the string "Arithmetic" if the sequence follows an arithmetic pattern
// // or return "Geometric" if it follows a geometric pattern. If the sequence
// // doesn't follow either pattern return -1. An arithmetic sequence is one where
// // the difference between each of the numbers is consistent, where as in a
// // geometric sequence, each term after the first is multiplied by some constant
// // or common ratio. Arithmetic example: [2, 4, 6, 8] and Geometric example: [2,
// // 6, 18, 54]. Negative numbers may be entered as parameters, 0 will not be
// // entered, and no array will contain all the same elements.

// func arithGeo(str []int) string {
// 	a := 0
// 	a2 := 0
// 	g := 0
// 	result := "Arithmetic"
// 	for i := 0; i < len(str)-1; i++ {
// 		if (str[i+1] - str[i]) == 1 {
// 			a++
// 		} else if (str[i+1] - str[i]) == 2 {
// 			a2++
// 		} else {
// 			g++
// 		}
// 	}

// 	if g > 0 {
// 		result = "Geometric"
// 	} else if a > 0 && a2 > 0 {
// 		result = "-1"
// 	}

// 	return result
// }

// // () => true
// // (()) => true
// // (() => false
// // ()) => false
// // ))(( => false

// // [] => true
// // {} => true
// // [(){}] => true
// // [({)}] => false
// func validBracket(str string) bool {
// 	brackets := map[string]string{"[": "]", "{": "}", "(": ")"}
// 	bracketsFront := []string{}

// 	if len(str)%2 != 0 {
// 		return false
// 	}

// 	for _, val := range str {
// 		// kondisi untuk mendapatkan front bracket
// 		if brackets[string(val)] != "" {
// 			bracketsFront = append(bracketsFront, string(val))
// 		} else {
// 			// pastikan branckerFront tidak sama dengan 0
// 			if len(bracketsFront) != 0 {
// 				if brackets[bracketsFront[len(bracketsFront)-1]] == string(val) {
// 					// hapus ketika branckerFront bertemu penutupnya
// 					bracketsFront = bracketsFront[:len(bracketsFront)-1]
// 				}
// 			}
// 		}
// 	}

// 	return len(bracketsFront) == 0
// }

// func recursiveNum(num int) int {
// 	result := num
// 	for i := 1; i < num; i++ {
// 		result = result * (num - i)
// 	}

// 	return result
// }
